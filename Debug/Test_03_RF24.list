
Test_03_RF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080035d4  080035d4  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b8  080036b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080036b8  080036b8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b8  080036b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080036c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000078  08003738  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003738  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096ae  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ce  00000000  00000000  0002974f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  0002b120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151c7  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007999  00000000  00000000  0004140f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d7bc  00000000  00000000  00048da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a94  00000000  00000000  000b65e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080035bc 	.word	0x080035bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080035bc 	.word	0x080035bc

0800014c <SPIWrite>:
#include "stm32f1xx_hal.h"

SPI_HandleTypeDef * hspi;

/*INTEFACES*/
void SPIWrite (uint8_t data) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    //SPI.transfer(data);
	HAL_SPI_Transmit(hspi, &data, 1, 100);
 8000156:	4b05      	ldr	r3, [pc, #20]	; (800016c <SPIWrite+0x20>)
 8000158:	6818      	ldr	r0, [r3, #0]
 800015a:	1df9      	adds	r1, r7, #7
 800015c:	2364      	movs	r3, #100	; 0x64
 800015e:	2201      	movs	r2, #1
 8000160:	f001 fc49 	bl	80019f6 <HAL_SPI_Transmit>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000a0 	.word	0x200000a0

08000170 <SPIRead>:
uint8_t SPIRead() {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
    //return SPI.transfer(0xff);
	uint8_t ret = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(hspi, &ret, 1, 100);
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <SPIRead+0x24>)
 800017c:	6818      	ldr	r0, [r3, #0]
 800017e:	1df9      	adds	r1, r7, #7
 8000180:	2364      	movs	r3, #100	; 0x64
 8000182:	2201      	movs	r2, #1
 8000184:	f001 fd6b 	bl	8001c5e <HAL_SPI_Receive>
	return ret;
 8000188:	79fb      	ldrb	r3, [r7, #7]
}
 800018a:	4618      	mov	r0, r3
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	200000a0 	.word	0x200000a0

08000198 <set_GPIO_pin>:
void set_GPIO_pin (uint8_t pin, uint8_t state) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	460a      	mov	r2, r1
 80001a2:	71fb      	strb	r3, [r7, #7]
 80001a4:	4613      	mov	r3, r2
 80001a6:	71bb      	strb	r3, [r7, #6]
  //digitalWrite(pin, state);
  if(pin == CE_PIN) { //CE
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d106      	bne.n	80001bc <set_GPIO_pin+0x24>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, state);
 80001ae:	79bb      	ldrb	r3, [r7, #6]
 80001b0:	461a      	mov	r2, r3
 80001b2:	2104      	movs	r1, #4
 80001b4:	4806      	ldr	r0, [pc, #24]	; (80001d0 <set_GPIO_pin+0x38>)
 80001b6:	f000 ff63 	bl	8001080 <HAL_GPIO_WritePin>
  }
  else { //CSN
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, state);
  }
}
 80001ba:	e005      	b.n	80001c8 <set_GPIO_pin+0x30>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, state);
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	461a      	mov	r2, r3
 80001c0:	2108      	movs	r1, #8
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <set_GPIO_pin+0x38>)
 80001c4:	f000 ff5c 	bl	8001080 <HAL_GPIO_WritePin>
}
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	40010800 	.word	0x40010800

080001d4 <delay_milliseconds>:
void delay_milliseconds(unsigned long milliseconds) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f000 fcef 	bl	8000bc0 <HAL_Delay>
}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <preInit>:

void preInit (void * spi_handle) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	hspi = (SPI_HandleTypeDef *)spi_handle;
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <preInit+0x18>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6013      	str	r3, [r2, #0]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	200000a0 	.word	0x200000a0

08000208 <SPIWriteBlock>:

/*COMMUNICATION*/

void SPIWriteBlock(void * data, uint8_t size) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	460b      	mov	r3, r1
 8000212:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < size; i++)
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]
 8000218:	e009      	b.n	800022e <SPIWriteBlock+0x26>
    {
        SPIWrite(*(uint8_t *)(data+i));
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ff92 	bl	800014c <SPIWrite>
	for(uint8_t i = 0; i < size; i++)
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	3301      	adds	r3, #1
 800022c:	73fb      	strb	r3, [r7, #15]
 800022e:	7bfa      	ldrb	r2, [r7, #15]
 8000230:	78fb      	ldrb	r3, [r7, #3]
 8000232:	429a      	cmp	r2, r3
 8000234:	d3f1      	bcc.n	800021a <SPIWriteBlock+0x12>
    }
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <SPIReadBlock>:
void SPIReadBlock(void * buff, uint8_t size) {
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b085      	sub	sp, #20
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
 8000246:	460b      	mov	r3, r1
 8000248:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < size; i++)
 800024a:	2300      	movs	r3, #0
 800024c:	73fb      	strb	r3, [r7, #15]
 800024e:	e009      	b.n	8000264 <SPIReadBlock+0x26>
    {
        *(uint8_t *)(buff+i) = SPIRead();
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	18d4      	adds	r4, r2, r3
 8000256:	f7ff ff8b 	bl	8000170 <SPIRead>
 800025a:	4603      	mov	r3, r0
 800025c:	7023      	strb	r3, [r4, #0]
    for(uint8_t i = 0; i < size; i++)
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	3301      	adds	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	7bfa      	ldrb	r2, [r7, #15]
 8000266:	78fb      	ldrb	r3, [r7, #3]
 8000268:	429a      	cmp	r2, r3
 800026a:	d3f1      	bcc.n	8000250 <SPIReadBlock+0x12>
    }
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bd90      	pop	{r4, r7, pc}

08000274 <writeRegister>:
void writeRegister(uint8_t reg, uint8_t data) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	460a      	mov	r2, r1
 800027e:	71fb      	strb	r3, [r7, #7]
 8000280:	4613      	mov	r3, r2
 8000282:	71bb      	strb	r3, [r7, #6]
    csn(0);
 8000284:	2100      	movs	r1, #0
 8000286:	2001      	movs	r0, #1
 8000288:	f7ff ff86 	bl	8000198 <set_GPIO_pin>
    SPIWrite(W_REGISTER | (REGISTER_MASK & reg));
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 031f 	and.w	r3, r3, #31
 8000292:	b2db      	uxtb	r3, r3
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff56 	bl	800014c <SPIWrite>
    SPIWrite(data);
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff52 	bl	800014c <SPIWrite>
    csn(1);
 80002a8:	2101      	movs	r1, #1
 80002aa:	2001      	movs	r0, #1
 80002ac:	f7ff ff74 	bl	8000198 <set_GPIO_pin>
}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <writeRegisterBlock>:
void writeRegisterBlock(uint8_t reg, void * data, uint8_t size) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	4613      	mov	r3, r2
 80002c6:	71bb      	strb	r3, [r7, #6]
    csn(0);
 80002c8:	2100      	movs	r1, #0
 80002ca:	2001      	movs	r0, #1
 80002cc:	f7ff ff64 	bl	8000198 <set_GPIO_pin>
    SPIWrite(W_REGISTER | (REGISTER_MASK & reg));
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	f003 031f 	and.w	r3, r3, #31
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	f043 0320 	orr.w	r3, r3, #32
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff34 	bl	800014c <SPIWrite>
    SPIWriteBlock(data, size);
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	4619      	mov	r1, r3
 80002e8:	6838      	ldr	r0, [r7, #0]
 80002ea:	f7ff ff8d 	bl	8000208 <SPIWriteBlock>
    csn(1);
 80002ee:	2101      	movs	r1, #1
 80002f0:	2001      	movs	r0, #1
 80002f2:	f7ff ff51 	bl	8000198 <set_GPIO_pin>
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <readRegister>:
uint8_t readRegister(uint8_t reg) {
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af00      	add	r7, sp, #0
 8000304:	4603      	mov	r3, r0
 8000306:	71fb      	strb	r3, [r7, #7]
    csn(0);
 8000308:	2100      	movs	r1, #0
 800030a:	2001      	movs	r0, #1
 800030c:	f7ff ff44 	bl	8000198 <set_GPIO_pin>
    SPIWrite(R_REGISTER | (REGISTER_MASK & reg));
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f003 031f 	and.w	r3, r3, #31
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff17 	bl	800014c <SPIWrite>
    uint8_t ret_data = SPIRead();
 800031e:	f7ff ff27 	bl	8000170 <SPIRead>
 8000322:	4603      	mov	r3, r0
 8000324:	73fb      	strb	r3, [r7, #15]
    csn(1);
 8000326:	2101      	movs	r1, #1
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff35 	bl	8000198 <set_GPIO_pin>
    return ret_data;
 800032e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000330:	4618      	mov	r0, r3
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <startRx>:
    csn(1);
}

/*LIB*/

uint8_t startRx() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

    flushTx();
 800033c:	21ff      	movs	r1, #255	; 0xff
 800033e:	20e1      	movs	r0, #225	; 0xe1
 8000340:	f7ff ff98 	bl	8000274 <writeRegister>
    resetStatus();
 8000344:	2170      	movs	r1, #112	; 0x70
 8000346:	2007      	movs	r0, #7
 8000348:	f7ff ff94 	bl	8000274 <writeRegister>

    ce(0); // Put radio into Standby-I mode in order to transition into RX mode.
 800034c:	2100      	movs	r1, #0
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ff22 	bl	8000198 <set_GPIO_pin>
    writeRegister(CONFIG, CONFIG_REG_SETTINGS_FOR_RX_MODE);
 8000354:	210b      	movs	r1, #11
 8000356:	2000      	movs	r0, #0
 8000358:	f7ff ff8c 	bl	8000274 <writeRegister>
    ce(1);
 800035c:	2101      	movs	r1, #1
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ff1a 	bl	8000198 <set_GPIO_pin>

    // Wait for the transition into RX mode.
    delay_milliseconds(POWERDOWN_TO_RXTX_MODE_MILLIS);
 8000364:	2005      	movs	r0, #5
 8000366:	f7ff ff35 	bl	80001d4 <delay_milliseconds>

    return readRegister(CONFIG) == CONFIG_REG_SETTINGS_FOR_RX_MODE;
 800036a:	2000      	movs	r0, #0
 800036c:	f7ff ffc7 	bl	80002fe <readRegister>
 8000370:	4603      	mov	r3, r0
 8000372:	2b0b      	cmp	r3, #11
 8000374:	bf0c      	ite	eq
 8000376:	2301      	moveq	r3, #1
 8000378:	2300      	movne	r3, #0
 800037a:	b2db      	uxtb	r3, r3
}
 800037c:	4618      	mov	r0, r3
 800037e:	bd80      	pop	{r7, pc}

08000380 <initRadio>:
uint8_t initRadio (uint8_t * receive_address, uint8_t bitrate, uint8_t channel) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
 800038c:	4613      	mov	r3, r2
 800038e:	70bb      	strb	r3, [r7, #2]

    //CE IN CSN moreta bit output

    csn(1);
 8000390:	2101      	movs	r1, #1
 8000392:	2001      	movs	r0, #1
 8000394:	f7ff ff00 	bl	8000198 <set_GPIO_pin>

    delay_milliseconds(OFF_TO_POWERDOWN_MILLIS);
 8000398:	2064      	movs	r0, #100	; 0x64
 800039a:	f7ff ff1b 	bl	80001d4 <delay_milliseconds>

    setChannel(channel);
 800039e:	78bb      	ldrb	r3, [r7, #2]
 80003a0:	4619      	mov	r1, r3
 80003a2:	2005      	movs	r0, #5
 80003a4:	f7ff ff66 	bl	8000274 <writeRegister>

    writeRegister(RF_SETUP, bitrate | RF_TX_PWR_MAX);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	f043 0306 	orr.w	r3, r3, #6
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4619      	mov	r1, r3
 80003b2:	2006      	movs	r0, #6
 80003b4:	f7ff ff5e 	bl	8000274 <writeRegister>

    if(receive_address != NULL)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d004      	beq.n	80003c8 <initRadio+0x48>
        writeRegisterBlock(RX_ADDR_P1, receive_address, 5);
 80003be:	2205      	movs	r2, #5
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	200b      	movs	r0, #11
 80003c4:	f7ff ff78 	bl	80002b8 <writeRegisterBlock>

    //Enable features like no ack
    writeRegister(DYNPD, _BV(DPL_P0) | _BV(DPL_P1));
 80003c8:	2103      	movs	r1, #3
 80003ca:	201c      	movs	r0, #28
 80003cc:	f7ff ff52 	bl	8000274 <writeRegister>
    writeRegister(FEATURE, _BV(EN_DPL) | _BV(EN_ACK_PAY) | _BV(EN_DYN_ACK));
 80003d0:	2107      	movs	r1, #7
 80003d2:	201d      	movs	r0, #29
 80003d4:	f7ff ff4e 	bl	8000274 <writeRegister>

    flushRx();
 80003d8:	21ff      	movs	r1, #255	; 0xff
 80003da:	20e2      	movs	r0, #226	; 0xe2
 80003dc:	f7ff ff4a 	bl	8000274 <writeRegister>
    flushTx();
 80003e0:	21ff      	movs	r1, #255	; 0xff
 80003e2:	20e1      	movs	r0, #225	; 0xe1
 80003e4:	f7ff ff46 	bl	8000274 <writeRegister>
    resetStatus();
 80003e8:	2170      	movs	r1, #112	; 0x70
 80003ea:	2007      	movs	r0, #7
 80003ec:	f7ff ff42 	bl	8000274 <writeRegister>

    return startRx();
 80003f0:	f7ff ffa2 	bl	8000338 <startRx>
 80003f4:	4603      	mov	r3, r0
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <hasData>:
uint8_t hasData() {
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
    return ((getStatus()>>1) & 0b111) != 0b111; //rx fifo not empty
 8000402:	2007      	movs	r0, #7
 8000404:	f7ff ff7b 	bl	80002fe <readRegister>
 8000408:	4603      	mov	r3, r0
 800040a:	085b      	lsrs	r3, r3, #1
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	2b07      	cmp	r3, #7
 8000414:	bf14      	ite	ne
 8000416:	2301      	movne	r3, #1
 8000418:	2300      	moveq	r3, #0
 800041a:	b2db      	uxtb	r3, r3
}
 800041c:	4618      	mov	r0, r3
 800041e:	bd80      	pop	{r7, pc}

08000420 <readData>:
void readData (void * data, uint8_t size) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
    if(!size)
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d104      	bne.n	800043c <readData+0x1c>
        size = readRegister(R_RX_PL_WID); //auto length
 8000432:	2060      	movs	r0, #96	; 0x60
 8000434:	f7ff ff63 	bl	80002fe <readRegister>
 8000438:	4603      	mov	r3, r0
 800043a:	70fb      	strb	r3, [r7, #3]

    csn(0);
 800043c:	2100      	movs	r1, #0
 800043e:	2001      	movs	r0, #1
 8000440:	f7ff feaa 	bl	8000198 <set_GPIO_pin>
    SPIWrite(R_RX_PAYLOAD);
 8000444:	2061      	movs	r0, #97	; 0x61
 8000446:	f7ff fe81 	bl	800014c <SPIWrite>
    SPIReadBlock(data, size);
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	4619      	mov	r1, r3
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff fef5 	bl	800023e <SPIReadBlock>
    csn(1);
 8000454:	2101      	movs	r1, #1
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff fe9e 	bl	8000198 <set_GPIO_pin>

    uint8_t status_reg = getStatus();
 800045c:	2007      	movs	r0, #7
 800045e:	f7ff ff4e 	bl	80002fe <readRegister>
 8000462:	4603      	mov	r3, r0
 8000464:	73fb      	strb	r3, [r7, #15]
    if(status_reg & _BV(RX_DR))
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046c:	2b00      	cmp	r3, #0
 800046e:	d003      	beq.n	8000478 <readData+0x58>
    {
        resetStatus();
 8000470:	2170      	movs	r1, #112	; 0x70
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff fefe 	bl	8000274 <writeRegister>
    }
}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void __io_putchar (char ch) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 800048a:	1df9      	adds	r1, r7, #7
 800048c:	2364      	movs	r3, #100	; 0x64
 800048e:	2201      	movs	r2, #1
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <__io_putchar+0x20>)
 8000492:	f001 ffb6 	bl	8002402 <HAL_UART_Transmit>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000ac 	.word	0x200000ac

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a8:	f000 fb28 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ac:	f000 f836 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b0:	f000 f8dc 	bl	800066c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004b4:	f000 f87a 	bl	80005ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f8ae 	bl	8000618 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  preInit(&hspi1);
 80004bc:	4812      	ldr	r0, [pc, #72]	; (8000508 <main+0x64>)
 80004be:	f7ff fe95 	bl	80001ec <preInit>
  while(!initRadio(rx_address, BITRATE2MBPS, 100)) {
 80004c2:	e005      	b.n	80004d0 <main+0x2c>
	 printf("Bad radio conn...\n\r");
 80004c4:	4811      	ldr	r0, [pc, #68]	; (800050c <main+0x68>)
 80004c6:	f002 f98b 	bl	80027e0 <iprintf>
	 HAL_Delay(100);
 80004ca:	2064      	movs	r0, #100	; 0x64
 80004cc:	f000 fb78 	bl	8000bc0 <HAL_Delay>
  while(!initRadio(rx_address, BITRATE2MBPS, 100)) {
 80004d0:	2264      	movs	r2, #100	; 0x64
 80004d2:	2108      	movs	r1, #8
 80004d4:	480e      	ldr	r0, [pc, #56]	; (8000510 <main+0x6c>)
 80004d6:	f7ff ff53 	bl	8000380 <initRadio>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0f1      	beq.n	80004c4 <main+0x20>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("Hello world!\n\r");
	  HAL_Delay(10);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f000 fb6d 	bl	8000bc0 <HAL_Delay>
	  while(hasData()) {
 80004e6:	e003      	b.n	80004f0 <main+0x4c>
		  readData(&rc_paket, sizeof(rc_paket));
 80004e8:	2105      	movs	r1, #5
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x70>)
 80004ec:	f7ff ff98 	bl	8000420 <readData>
	  while(hasData()) {
 80004f0:	f7ff ff85 	bl	80003fe <hasData>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f6      	bne.n	80004e8 <main+0x44>
	  }
	  printf("Pitch: %d\n\r", rc_paket.pitch);
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x70>)
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	4619      	mov	r1, r3
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x74>)
 8000502:	f002 f96d 	bl	80027e0 <iprintf>
	  HAL_Delay(10);
 8000506:	e7eb      	b.n	80004e0 <main+0x3c>
 8000508:	200000ec 	.word	0x200000ec
 800050c:	080035d4 	.word	0x080035d4
 8000510:	20000000 	.word	0x20000000
 8000514:	200000a4 	.word	0x200000a4
 8000518:	080035e8 	.word	0x080035e8

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b090      	sub	sp, #64	; 0x40
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 f950 	bl	80027d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000546:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0318 	add.w	r3, r7, #24
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fda3 	bl	80010b0 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000570:	f000 f8dc 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2302      	movs	r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f001 f80e 	bl	80015b0 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059a:	f000 f8c7 	bl	800072c <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800059e:	f001 f8f1 	bl	8001784 <HAL_RCC_EnableCSS>
}
 80005a2:	bf00      	nop
 80005a4:	3740      	adds	r7, #64	; 0x40
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_SPI1_Init+0x64>)
 80005b2:	4a18      	ldr	r2, [pc, #96]	; (8000614 <MX_SPI1_Init+0x68>)
 80005b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_SPI1_Init+0x64>)
 80005b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_SPI1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_SPI1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_SPI1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_SPI1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_SPI1_Init+0x64>)
 80005d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_SPI1_Init+0x64>)
 80005e0:	2210      	movs	r2, #16
 80005e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_SPI1_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_SPI1_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_SPI1_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_SPI1_Init+0x64>)
 80005f8:	220a      	movs	r2, #10
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_SPI1_Init+0x64>)
 80005fe:	f001 f999 	bl	8001934 <HAL_SPI_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000608:	f000 f890 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000ec 	.word	0x200000ec
 8000614:	40013000 	.word	0x40013000

08000618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f001 fe8a 	bl	8002368 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f867 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000ac 	.word	0x200000ac
 8000668:	40013800 	.word	0x40013800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <MX_GPIO_Init+0xb4>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_GPIO_Init+0xb4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_GPIO_Init+0xb4>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a20      	ldr	r2, [pc, #128]	; (8000720 <MX_GPIO_Init+0xb4>)
 800069e:	f043 0320 	orr.w	r3, r3, #32
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0xb4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ce:	4815      	ldr	r0, [pc, #84]	; (8000724 <MX_GPIO_Init+0xb8>)
 80006d0:	f000 fcd6 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_PIN_Pin|CSN_PIN_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	210c      	movs	r1, #12
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <MX_GPIO_Init+0xbc>)
 80006da:	f000 fcd1 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0xb8>)
 80006f8:	f000 fb68 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_PIN_Pin CSN_PIN_Pin */
  GPIO_InitStruct.Pin = CE_PIN_Pin|CSN_PIN_Pin;
 80006fc:	230c      	movs	r3, #12
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0xbc>)
 8000714:	f000 fb5a 	bl	8000dcc <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	40011000 	.word	0x40011000
 8000728:	40010800 	.word	0x40010800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_MspInit+0x5c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x5c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x60>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_MspInit+0x60>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	40010000 	.word	0x40010000

0800079c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <HAL_SPI_MspInit+0x88>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d12f      	bne.n	800081c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <HAL_SPI_MspInit+0x8c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <HAL_SPI_MspInit+0x8c>)
 80007c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_SPI_MspInit+0x8c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_SPI_MspInit+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <HAL_SPI_MspInit+0x8c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_SPI_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <HAL_SPI_MspInit+0x90>)
 8000800:	f000 fae4 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_SPI_MspInit+0x90>)
 8000818:	f000 fad8 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40013000 	.word	0x40013000
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <HAL_UART_MspInit+0x8c>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d131      	bne.n	80008b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_UART_MspInit+0x90>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_UART_MspInit+0x90>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0x90>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <HAL_UART_MspInit+0x94>)
 8000896:	f000 fa99 	bl	8000dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_UART_MspInit+0x94>)
 80008b0:	f000 fa8c 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40013800 	.word	0x40013800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010800 	.word	0x40010800

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80008cc:	f000 fffa 	bl	80018c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <HardFault_Handler+0x4>

080008da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <BusFault_Handler+0x4>

080008e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f938 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
	}

return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fd85 	bl	8000480 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
	}
	return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
	return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b4:	605a      	str	r2, [r3, #4]
	return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_isatty>:

int _isatty(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	return 1;
 80009ca:	2301      	movs	r3, #1
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
	return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x16>
		heap_end = &end;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <_sbrk+0x50>)
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <_sbrk+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <_sbrk+0x50>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <_sbrk+0x50>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	466a      	mov	r2, sp
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d907      	bls.n	8000a2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a1a:	f001 feaf 	bl	800277c <__errno>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	230c      	movs	r3, #12
 8000a22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <_sbrk+0x50>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <_sbrk+0x50>)
 8000a34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000094 	.word	0x20000094
 8000a44:	20000150 	.word	0x20000150

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SystemInit+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <SystemInit+0x5c>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <SystemInit+0x5c>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	4911      	ldr	r1, [pc, #68]	; (8000aa4 <SystemInit+0x5c>)
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <SystemInit+0x60>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <SystemInit+0x5c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <SystemInit+0x5c>)
 8000a6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <SystemInit+0x5c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SystemInit+0x5c>)
 8000a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <SystemInit+0x5c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <SystemInit+0x5c>)
 8000a86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SystemInit+0x5c>)
 8000a8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SystemInit+0x64>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	f8ff0000 	.word	0xf8ff0000
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000abc:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f7ff ffb7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f001 fe55 	bl	8002788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fce1 	bl	80004a4 <main>
  bx lr
 8000ae2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ae4:	080036c0 	.word	0x080036c0
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aec:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000af0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000af4:	2000014c 	.word	0x2000014c

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x28>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x28>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f929 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fe0e 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f933 	bl	8000db2 <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 f909 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000010 	.word	0x20000010
 8000b84:	2000000c 	.word	0x2000000c

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	20000144 	.word	0x20000144

08000bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000144 	.word	0x20000144

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_Delay+0x40>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffe0 	bl	8000bac <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000010 	.word	0x20000010

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d44:	f7ff ff90 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff49 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff5e 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffb0 	bl	8000d20 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e127      	b.n	8001030 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de0:	2201      	movs	r2, #1
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8116 	bne.w	800102a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d034      	beq.n	8000e70 <HAL_GPIO_Init+0xa4>
 8000e06:	2b12      	cmp	r3, #18
 8000e08:	d80d      	bhi.n	8000e26 <HAL_GPIO_Init+0x5a>
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d02b      	beq.n	8000e66 <HAL_GPIO_Init+0x9a>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d804      	bhi.n	8000e1c <HAL_GPIO_Init+0x50>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d031      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d01c      	beq.n	8000e54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1a:	e048      	b.n	8000eae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d043      	beq.n	8000ea8 <HAL_GPIO_Init+0xdc>
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d01b      	beq.n	8000e5c <HAL_GPIO_Init+0x90>
          break;
 8000e24:	e043      	b.n	8000eae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e26:	4a89      	ldr	r2, [pc, #548]	; (800104c <HAL_GPIO_Init+0x280>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d026      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e2c:	4a87      	ldr	r2, [pc, #540]	; (800104c <HAL_GPIO_Init+0x280>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d806      	bhi.n	8000e40 <HAL_GPIO_Init+0x74>
 8000e32:	4a87      	ldr	r2, [pc, #540]	; (8001050 <HAL_GPIO_Init+0x284>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d020      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e38:	4a86      	ldr	r2, [pc, #536]	; (8001054 <HAL_GPIO_Init+0x288>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01d      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
          break;
 8000e3e:	e036      	b.n	8000eae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e40:	4a85      	ldr	r2, [pc, #532]	; (8001058 <HAL_GPIO_Init+0x28c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e46:	4a85      	ldr	r2, [pc, #532]	; (800105c <HAL_GPIO_Init+0x290>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d016      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
 8000e4c:	4a84      	ldr	r2, [pc, #528]	; (8001060 <HAL_GPIO_Init+0x294>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0xae>
          break;
 8000e52:	e02c      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e028      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e023      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e01e      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	330c      	adds	r3, #12
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e019      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e82:	2304      	movs	r3, #4
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e012      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	611a      	str	r2, [r3, #16]
          break;
 8000e9a:	e008      	b.n	8000eae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	615a      	str	r2, [r3, #20]
          break;
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	d801      	bhi.n	8000eb8 <HAL_GPIO_Init+0xec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	e001      	b.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d802      	bhi.n	8000eca <HAL_GPIO_Init+0xfe>
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x104>
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	6a39      	ldr	r1, [r7, #32]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	431a      	orrs	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8096 	beq.w	800102a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000efe:	4b59      	ldr	r3, [pc, #356]	; (8001064 <HAL_GPIO_Init+0x298>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a58      	ldr	r2, [pc, #352]	; (8001064 <HAL_GPIO_Init+0x298>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b56      	ldr	r3, [pc, #344]	; (8001064 <HAL_GPIO_Init+0x298>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f16:	4a54      	ldr	r2, [pc, #336]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x19e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x2a4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x19a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_GPIO_Init+0x2a8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x196>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2ac>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x192>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x1a0>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7c:	493a      	ldr	r1, [pc, #232]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4938      	ldr	r1, [pc, #224]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
 8000fa2:	e006      	b.n	8000fb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4933      	ldr	r1, [pc, #204]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	492e      	ldr	r1, [pc, #184]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4929      	ldr	r1, [pc, #164]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	4924      	ldr	r1, [pc, #144]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	608b      	str	r3, [r1, #8]
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	491f      	ldr	r1, [pc, #124]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	491a      	ldr	r1, [pc, #104]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	60cb      	str	r3, [r1, #12]
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_GPIO_Init+0x2b0>)
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	43db      	mvns	r3, r3
 8001024:	4915      	ldr	r1, [pc, #84]	; (800107c <HAL_GPIO_Init+0x2b0>)
 8001026:	4013      	ands	r3, r2
 8001028:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	f47f aed0 	bne.w	8000de0 <HAL_GPIO_Init+0x14>
  }
}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	; 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	10210000 	.word	0x10210000
 8001050:	10110000 	.word	0x10110000
 8001054:	10120000 	.word	0x10120000
 8001058:	10310000 	.word	0x10310000
 800105c:	10320000 	.word	0x10320000
 8001060:	10220000 	.word	0x10220000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	611a      	str	r2, [r3, #16]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e26c      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d0:	4b92      	ldr	r3, [pc, #584]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	4b8f      	ldr	r3, [pc, #572]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d112      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
 80010e8:	4b8c      	ldr	r3, [pc, #560]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b89      	ldr	r3, [pc, #548]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06c      	beq.n	80011dc <HAL_RCC_OscConfig+0x12c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d168      	bne.n	80011dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e246      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x76>
 8001118:	4b80      	ldr	r3, [pc, #512]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7f      	ldr	r2, [pc, #508]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e02e      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b7b      	ldr	r3, [pc, #492]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a7a      	ldr	r2, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b78      	ldr	r3, [pc, #480]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a77      	ldr	r2, [pc, #476]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0xbc>
 8001152:	4b72      	ldr	r3, [pc, #456]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a71      	ldr	r2, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b6f      	ldr	r3, [pc, #444]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6e      	ldr	r2, [pc, #440]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 800116c:	4b6b      	ldr	r3, [pc, #428]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6a      	ldr	r2, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a67      	ldr	r2, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fd0e 	bl	8000bac <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fd0a 	bl	8000bac <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1fa      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b5d      	ldr	r3, [pc, #372]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xe4>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcfa 	bl	8000bac <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcf6 	bl	8000bac <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1e6      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x10c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ea:	4b4c      	ldr	r3, [pc, #304]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1ba      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fcaf 	bl	8000bac <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fcab 	bl	8000bac <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e19b      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4927      	ldr	r1, [pc, #156]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc8e 	bl	8000bac <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc8a 	bl	8000bac <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e17a      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d03a      	beq.n	8001334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d019      	beq.n	80012fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc6e 	bl	8000bac <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc6a 	bl	8000bac <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e15a      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 fafa 	bl	80018ec <RCC_Delay>
 80012f8:	e01c      	b.n	8001334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fc54 	bl	8000bac <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e00f      	b.n	8001328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fc50 	bl	8000bac <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d908      	bls.n	8001328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e140      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	42420000 	.word	0x42420000
 8001324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b9e      	ldr	r3, [pc, #632]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e9      	bne.n	8001308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a6 	beq.w	800148e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b97      	ldr	r3, [pc, #604]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b94      	ldr	r3, [pc, #592]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a93      	ldr	r2, [pc, #588]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b8e      	ldr	r3, [pc, #568]	; (80015a8 <HAL_RCC_OscConfig+0x4f8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <HAL_RCC_OscConfig+0x4f8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a8a      	ldr	r2, [pc, #552]	; (80015a8 <HAL_RCC_OscConfig+0x4f8>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fc11 	bl	8000bac <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fc0d 	bl	8000bac <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b64      	cmp	r3, #100	; 0x64
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0fd      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x4f8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x312>
 80013b4:	4b7b      	ldr	r3, [pc, #492]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e02d      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x334>
 80013ca:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a75      	ldr	r2, [pc, #468]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a72      	ldr	r2, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x356>
 80013ec:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a69      	ldr	r2, [pc, #420]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 8001406:	4b67      	ldr	r3, [pc, #412]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a66      	ldr	r2, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a63      	ldr	r2, [pc, #396]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fbc1 	bl	8000bac <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fbbd 	bl	8000bac <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0ab      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x37e>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fbab 	bl	8000bac <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fba7 	bl	8000bac <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e095      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8081 	beq.w	800159a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d061      	beq.n	8001568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d146      	bne.n	800153a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <HAL_RCC_OscConfig+0x4fc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb7b 	bl	8000bac <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb77 	bl	8000bac <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e067      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	492d      	ldr	r1, [pc, #180]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a19      	ldr	r1, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	430b      	orrs	r3, r1
 8001506:	4927      	ldr	r1, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_OscConfig+0x4fc>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb4b 	bl	8000bac <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb47 	bl	8000bac <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e037      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x46a>
 8001538:	e02f      	b.n	800159a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_RCC_OscConfig+0x4fc>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb34 	bl	8000bac <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb30 	bl	8000bac <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e020      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x498>
 8001566:	e018      	b.n	800159a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e013      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	429a      	cmp	r2, r3
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40007000 	.word	0x40007000
 80015ac:	42420060 	.word	0x42420060

080015b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0d0      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d910      	bls.n	80015f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b67      	ldr	r3, [pc, #412]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 0207 	bic.w	r2, r3, #7
 80015da:	4965      	ldr	r1, [pc, #404]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b63      	ldr	r3, [pc, #396]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0b8      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800160c:	4b59      	ldr	r3, [pc, #356]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800162e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	494d      	ldr	r1, [pc, #308]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d040      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e07f      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e073      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06b      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4936      	ldr	r1, [pc, #216]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa84 	bl	8000bac <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa80 	bl	8000bac <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e053      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d210      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 0207 	bic.w	r2, r3, #7
 80016e6:	4922      	ldr	r1, [pc, #136]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e032      	b.n	8001766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4916      	ldr	r1, [pc, #88]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490e      	ldr	r1, [pc, #56]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f82d 	bl	800179c <HAL_RCC_GetSysClockFreq>
 8001742:	4601      	mov	r1, r0
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	5cd3      	ldrb	r3, [r2, r3]
 8001752:	fa21 f303 	lsr.w	r3, r1, r3
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_RCC_ClockConfig+0x1cc>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1d0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f9e2 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	08003608 	.word	0x08003608
 800177c:	20000008 	.word	0x20000008
 8001780:	2000000c 	.word	0x2000000c

08001784 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_EnableCSS+0x14>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	4242004c 	.word	0x4242004c

0800179c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	b490      	push	{r4, r7}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017a4:	1d3c      	adds	r4, r7, #4
 80017a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x40>
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x46>
 80017da:	e02d      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017de:	623b      	str	r3, [r7, #32]
      break;
 80017e0:	e02d      	b.n	800183e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ee:	4413      	add	r3, r2
 80017f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0c5b      	lsrs	r3, r3, #17
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800180e:	4413      	add	r3, r2
 8001810:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001814:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800181a:	fb02 f203 	mul.w	r2, r2, r3
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	e004      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <HAL_RCC_GetSysClockFreq+0xc0>)
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	623b      	str	r3, [r7, #32]
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183a:	623b      	str	r3, [r7, #32]
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	6a3b      	ldr	r3, [r7, #32]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bc90      	pop	{r4, r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	080035f4 	.word	0x080035f4
 8001850:	08003604 	.word	0x08003604
 8001854:	40021000 	.word	0x40021000
 8001858:	007a1200 	.word	0x007a1200
 800185c:	003d0900 	.word	0x003d0900

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_GetHCLKFreq+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff2 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 800187c:	4601      	mov	r1, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	08003618 	.word	0x08003618

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffde 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08003618 	.word	0x08003618

080018c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d104      	bne.n	80018de <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80018d4:	f000 f828 	bl	8001928 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	701a      	strb	r2, [r3, #0]
  }
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	4002100a 	.word	0x4002100a

080018ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <RCC_Delay+0x34>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <RCC_Delay+0x38>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0a5b      	lsrs	r3, r3, #9
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001908:	bf00      	nop
  }
  while (Delay --);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	60fa      	str	r2, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <RCC_Delay+0x1c>
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	10624dd3 	.word	0x10624dd3

08001928 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e053      	b.n	80019ee <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d106      	bne.n	8001966 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7fe ff1b 	bl	800079c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2202      	movs	r2, #2
 800196a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800197c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	ea42 0103 	orr.w	r1, r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	0c1a      	lsrs	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f002 0204 	and.w	r2, r2, #4
 80019cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b088      	sub	sp, #32
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_SPI_Transmit+0x22>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e11e      	b.n	8001c56 <HAL_SPI_Transmit+0x260>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a20:	f7ff f8c4 	bl	8000bac <HAL_GetTick>
 8001a24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d002      	beq.n	8001a3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a3a:	e103      	b.n	8001c44 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_SPI_Transmit+0x52>
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a4c:	e0fa      	b.n	8001c44 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2203      	movs	r2, #3
 8001a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a94:	d107      	bne.n	8001aa6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	2b40      	cmp	r3, #64	; 0x40
 8001ab2:	d007      	beq.n	8001ac4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001acc:	d14b      	bne.n	8001b66 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_SPI_Transmit+0xe6>
 8001ad6:	8afb      	ldrh	r3, [r7, #22]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d13e      	bne.n	8001b5a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	1c9a      	adds	r2, r3, #2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b00:	e02b      	b.n	8001b5a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d112      	bne.n	8001b36 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	1c9a      	adds	r2, r3, #2
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b34:	e011      	b.n	8001b5a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b36:	f7ff f839 	bl	8000bac <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d803      	bhi.n	8001b4e <HAL_SPI_Transmit+0x158>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b4c:	d102      	bne.n	8001b54 <HAL_SPI_Transmit+0x15e>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b58:	e074      	b.n	8001c44 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1ce      	bne.n	8001b02 <HAL_SPI_Transmit+0x10c>
 8001b64:	e04c      	b.n	8001c00 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_SPI_Transmit+0x17e>
 8001b6e:	8afb      	ldrh	r3, [r7, #22]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d140      	bne.n	8001bf6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b9a:	e02c      	b.n	8001bf6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d113      	bne.n	8001bd2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	330c      	adds	r3, #12
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bd0:	e011      	b.n	8001bf6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bd2:	f7fe ffeb 	bl	8000bac <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d803      	bhi.n	8001bea <HAL_SPI_Transmit+0x1f4>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be8:	d102      	bne.n	8001bf0 <HAL_SPI_Transmit+0x1fa>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bf4:	e026      	b.n	8001c44 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1cd      	bne.n	8001b9c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fb91 	bl	800232c <SPI_EndRxTxTransaction>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
 8001c40:	e000      	b.n	8001c44 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b088      	sub	sp, #32
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c7a:	d112      	bne.n	8001ca2 <HAL_SPI_Receive+0x44>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10e      	bne.n	8001ca2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2204      	movs	r2, #4
 8001c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f8e9 	bl	8001e70 <HAL_SPI_TransmitReceive>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	e0e2      	b.n	8001e68 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_SPI_Receive+0x52>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e0db      	b.n	8001e68 <HAL_SPI_Receive+0x20a>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cb8:	f7fe ff78 	bl	8000bac <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cce:	e0c2      	b.n	8001e56 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_Receive+0x7e>
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ce0:	e0b9      	b.n	8001e56 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	88fa      	ldrh	r2, [r7, #6]
 8001d00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d28:	d107      	bne.n	8001d3a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d44:	2b40      	cmp	r3, #64	; 0x40
 8001d46:	d007      	beq.n	8001d58 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d162      	bne.n	8001e26 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d60:	e02e      	b.n	8001dc0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d115      	bne.n	8001d9c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f103 020c 	add.w	r2, r3, #12
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d9a:	e011      	b.n	8001dc0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d9c:	f7fe ff06 	bl	8000bac <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d803      	bhi.n	8001db4 <HAL_SPI_Receive+0x156>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db2:	d102      	bne.n	8001dba <HAL_SPI_Receive+0x15c>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001dbe:	e04a      	b.n	8001e56 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1cb      	bne.n	8001d62 <HAL_SPI_Receive+0x104>
 8001dca:	e031      	b.n	8001e30 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d113      	bne.n	8001e02 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	b292      	uxth	r2, r2
 8001de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e00:	e011      	b.n	8001e26 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e02:	f7fe fed3 	bl	8000bac <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d803      	bhi.n	8001e1a <HAL_SPI_Receive+0x1bc>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e18:	d102      	bne.n	8001e20 <HAL_SPI_Receive+0x1c2>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e24:	e017      	b.n	8001e56 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1cd      	bne.n	8001dcc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fa27 	bl	8002288 <SPI_EndRxTransaction>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
 8001e52:	e000      	b.n	8001e56 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001e54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x26>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e18a      	b.n	80021ac <HAL_SPI_TransmitReceive+0x33c>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e9e:	f7fe fe85 	bl	8000bac <HAL_GetTick>
 8001ea2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d00f      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x70>
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec6:	d107      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x68>
 8001ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d003      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ede:	e15b      	b.n	8002198 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_SPI_TransmitReceive+0x82>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_SPI_TransmitReceive+0x82>
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ef8:	e14e      	b.n	8002198 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d003      	beq.n	8001f0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	887a      	ldrh	r2, [r7, #2]
 8001f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	887a      	ldrh	r2, [r7, #2]
 8001f36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d007      	beq.n	8001f62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f6a:	d178      	bne.n	800205e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_SPI_TransmitReceive+0x10a>
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d166      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	1c9a      	adds	r2, r3, #2
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f9e:	e053      	b.n	8002048 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d11b      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x176>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d016      	beq.n	8001fe6 <HAL_SPI_TransmitReceive+0x176>
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d113      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	1c9a      	adds	r2, r3, #2
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d119      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x1b8>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d014      	beq.n	8002028 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	b292      	uxth	r2, r2
 800200a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	1c9a      	adds	r2, r3, #2
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002024:	2301      	movs	r3, #1
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002028:	f7fe fdc0 	bl	8000bac <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002034:	429a      	cmp	r2, r3
 8002036:	d807      	bhi.n	8002048 <HAL_SPI_TransmitReceive+0x1d8>
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203e:	d003      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002046:	e0a7      	b.n	8002198 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1a6      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x130>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1a1      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x130>
 800205c:	e07c      	b.n	8002158 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_SPI_TransmitReceive+0x1fc>
 8002066:	8b7b      	ldrh	r3, [r7, #26]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d16b      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	330c      	adds	r3, #12
 8002076:	7812      	ldrb	r2, [r2, #0]
 8002078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002092:	e057      	b.n	8002144 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d11c      	bne.n	80020dc <HAL_SPI_TransmitReceive+0x26c>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_SPI_TransmitReceive+0x26c>
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d114      	bne.n	80020dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d119      	bne.n	800211e <HAL_SPI_TransmitReceive+0x2ae>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800211a:	2301      	movs	r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800211e:	f7fe fd45 	bl	8000bac <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800212a:	429a      	cmp	r2, r3
 800212c:	d803      	bhi.n	8002136 <HAL_SPI_TransmitReceive+0x2c6>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002134:	d102      	bne.n	800213c <HAL_SPI_TransmitReceive+0x2cc>
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002142:	e029      	b.n	8002198 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1a2      	bne.n	8002094 <HAL_SPI_TransmitReceive+0x224>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d19d      	bne.n	8002094 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f8e5 	bl	800232c <SPI_EndRxTxTransaction>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002174:	e010      	b.n	8002198 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	e000      	b.n	8002198 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021c4:	e04c      	b.n	8002260 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021cc:	d048      	beq.n	8002260 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021ce:	f7fe fced 	bl	8000bac <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d902      	bls.n	80021e4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d13d      	bne.n	8002260 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021fc:	d111      	bne.n	8002222 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002206:	d004      	beq.n	8002212 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002210:	d107      	bne.n	8002222 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d10f      	bne.n	800224c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800224a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e00f      	b.n	8002280 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4013      	ands	r3, r2
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	429a      	cmp	r2, r3
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	429a      	cmp	r2, r3
 800227c:	d1a3      	bne.n	80021c6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800229c:	d111      	bne.n	80022c2 <SPI_EndRxTransaction+0x3a>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a6:	d004      	beq.n	80022b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d107      	bne.n	80022c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ca:	d117      	bne.n	80022fc <SPI_EndRxTransaction+0x74>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	d112      	bne.n	80022fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2200      	movs	r2, #0
 80022de:	2101      	movs	r1, #1
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff ff67 	bl	80021b4 <SPI_WaitFlagStateUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01a      	beq.n	8002322 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e013      	b.n	8002324 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2200      	movs	r2, #0
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff54 	bl	80021b4 <SPI_WaitFlagStateUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0220 	orr.w	r2, r3, #32
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e000      	b.n	8002324 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f7ff ff36 	bl	80021b4 <SPI_WaitFlagStateUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f043 0220 	orr.w	r2, r3, #32
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e000      	b.n	8002360 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e03f      	b.n	80023fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fa4e 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f90b 	bl	80025c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af02      	add	r7, sp, #8
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	f040 8083 	bne.w	800252a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_UART_Transmit+0x2e>
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e07b      	b.n	800252c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_UART_Transmit+0x40>
 800243e:	2302      	movs	r3, #2
 8002440:	e074      	b.n	800252c <HAL_UART_Transmit+0x12a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2221      	movs	r2, #33	; 0x21
 8002454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002458:	f7fe fba8 	bl	8000bac <HAL_GetTick>
 800245c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800246a:	e042      	b.n	80024f2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d122      	bne.n	80024ca <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2200      	movs	r2, #0
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f850 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e046      	b.n	800252c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3302      	adds	r3, #2
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	e017      	b.n	80024f2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	e013      	b.n	80024f2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f82d 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e023      	b.n	800252c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1b7      	bne.n	800246c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2200      	movs	r2, #0
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f814 	bl	8002534 <UART_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e00a      	b.n	800252c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002544:	e02c      	b.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254c:	d028      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <UART_WaitOnFlagUntilTimeout+0x30>
 8002554:	f7fe fb2a 	bl	8000bac <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	429a      	cmp	r2, r3
 8002562:	d21d      	bcs.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002572:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e00f      	b.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d0c3      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002602:	f023 030c 	bic.w	r3, r3, #12
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	430b      	orrs	r3, r1
 800260e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a52      	ldr	r2, [pc, #328]	; (8002774 <UART_SetConfig+0x1ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d14e      	bne.n	80026ce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002630:	f7ff f934 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 8002634:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <UART_SetConfig+0x1b0>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	0119      	lsls	r1, r3, #4
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009a      	lsls	r2, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fbb2 f2f3 	udiv	r2, r2, r3
 800266c:	4b42      	ldr	r3, [pc, #264]	; (8002778 <UART_SetConfig+0x1b0>)
 800266e:	fba3 0302 	umull	r0, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2064      	movs	r0, #100	; 0x64
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	; 0x32
 8002680:	4a3d      	ldr	r2, [pc, #244]	; (8002778 <UART_SetConfig+0x1b0>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268c:	4419      	add	r1, r3
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009a      	lsls	r2, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <UART_SetConfig+0x1b0>)
 80026a6:	fba3 0302 	umull	r0, r3, r3, r2
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	fb00 f303 	mul.w	r3, r0, r3
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	; 0x32
 80026b8:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <UART_SetConfig+0x1b0>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	440a      	add	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80026cc:	e04d      	b.n	800276a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80026ce:	f7ff f8d1 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 80026d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009a      	lsls	r2, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <UART_SetConfig+0x1b0>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	0119      	lsls	r1, r3, #4
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	fbb2 f2f3 	udiv	r2, r2, r3
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <UART_SetConfig+0x1b0>)
 800270c:	fba3 0302 	umull	r0, r3, r3, r2
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	2064      	movs	r0, #100	; 0x64
 8002714:	fb00 f303 	mul.w	r3, r0, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <UART_SetConfig+0x1b0>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272a:	4419      	add	r1, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	441a      	add	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <UART_SetConfig+0x1b0>)
 8002744:	fba3 0302 	umull	r0, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	fb00 f303 	mul.w	r3, r0, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	3332      	adds	r3, #50	; 0x32
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <UART_SetConfig+0x1b0>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	440a      	add	r2, r1
 8002768:	609a      	str	r2, [r3, #8]
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40013800 	.word	0x40013800
 8002778:	51eb851f 	.word	0x51eb851f

0800277c <__errno>:
 800277c:	4b01      	ldr	r3, [pc, #4]	; (8002784 <__errno+0x8>)
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000014 	.word	0x20000014

08002788 <__libc_init_array>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	2500      	movs	r5, #0
 800278c:	4e0c      	ldr	r6, [pc, #48]	; (80027c0 <__libc_init_array+0x38>)
 800278e:	4c0d      	ldr	r4, [pc, #52]	; (80027c4 <__libc_init_array+0x3c>)
 8002790:	1ba4      	subs	r4, r4, r6
 8002792:	10a4      	asrs	r4, r4, #2
 8002794:	42a5      	cmp	r5, r4
 8002796:	d109      	bne.n	80027ac <__libc_init_array+0x24>
 8002798:	f000 ff10 	bl	80035bc <_init>
 800279c:	2500      	movs	r5, #0
 800279e:	4e0a      	ldr	r6, [pc, #40]	; (80027c8 <__libc_init_array+0x40>)
 80027a0:	4c0a      	ldr	r4, [pc, #40]	; (80027cc <__libc_init_array+0x44>)
 80027a2:	1ba4      	subs	r4, r4, r6
 80027a4:	10a4      	asrs	r4, r4, #2
 80027a6:	42a5      	cmp	r5, r4
 80027a8:	d105      	bne.n	80027b6 <__libc_init_array+0x2e>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027b0:	4798      	blx	r3
 80027b2:	3501      	adds	r5, #1
 80027b4:	e7ee      	b.n	8002794 <__libc_init_array+0xc>
 80027b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027ba:	4798      	blx	r3
 80027bc:	3501      	adds	r5, #1
 80027be:	e7f2      	b.n	80027a6 <__libc_init_array+0x1e>
 80027c0:	080036b8 	.word	0x080036b8
 80027c4:	080036b8 	.word	0x080036b8
 80027c8:	080036b8 	.word	0x080036b8
 80027cc:	080036bc 	.word	0x080036bc

080027d0 <memset>:
 80027d0:	4603      	mov	r3, r0
 80027d2:	4402      	add	r2, r0
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d100      	bne.n	80027da <memset+0xa>
 80027d8:	4770      	bx	lr
 80027da:	f803 1b01 	strb.w	r1, [r3], #1
 80027de:	e7f9      	b.n	80027d4 <memset+0x4>

080027e0 <iprintf>:
 80027e0:	b40f      	push	{r0, r1, r2, r3}
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <iprintf+0x2c>)
 80027e4:	b513      	push	{r0, r1, r4, lr}
 80027e6:	681c      	ldr	r4, [r3, #0]
 80027e8:	b124      	cbz	r4, 80027f4 <iprintf+0x14>
 80027ea:	69a3      	ldr	r3, [r4, #24]
 80027ec:	b913      	cbnz	r3, 80027f4 <iprintf+0x14>
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f84e 	bl	8002890 <__sinit>
 80027f4:	ab05      	add	r3, sp, #20
 80027f6:	9a04      	ldr	r2, [sp, #16]
 80027f8:	68a1      	ldr	r1, [r4, #8]
 80027fa:	4620      	mov	r0, r4
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	f000 f953 	bl	8002aa8 <_vfiprintf_r>
 8002802:	b002      	add	sp, #8
 8002804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002808:	b004      	add	sp, #16
 800280a:	4770      	bx	lr
 800280c:	20000014 	.word	0x20000014

08002810 <std>:
 8002810:	2300      	movs	r3, #0
 8002812:	b510      	push	{r4, lr}
 8002814:	4604      	mov	r4, r0
 8002816:	e9c0 3300 	strd	r3, r3, [r0]
 800281a:	6083      	str	r3, [r0, #8]
 800281c:	8181      	strh	r1, [r0, #12]
 800281e:	6643      	str	r3, [r0, #100]	; 0x64
 8002820:	81c2      	strh	r2, [r0, #14]
 8002822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002826:	6183      	str	r3, [r0, #24]
 8002828:	4619      	mov	r1, r3
 800282a:	2208      	movs	r2, #8
 800282c:	305c      	adds	r0, #92	; 0x5c
 800282e:	f7ff ffcf 	bl	80027d0 <memset>
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <std+0x38>)
 8002834:	6224      	str	r4, [r4, #32]
 8002836:	6263      	str	r3, [r4, #36]	; 0x24
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <std+0x3c>)
 800283a:	62a3      	str	r3, [r4, #40]	; 0x28
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <std+0x40>)
 800283e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <std+0x44>)
 8002842:	6323      	str	r3, [r4, #48]	; 0x30
 8002844:	bd10      	pop	{r4, pc}
 8002846:	bf00      	nop
 8002848:	08003005 	.word	0x08003005
 800284c:	08003027 	.word	0x08003027
 8002850:	0800305f 	.word	0x0800305f
 8002854:	08003083 	.word	0x08003083

08002858 <_cleanup_r>:
 8002858:	4901      	ldr	r1, [pc, #4]	; (8002860 <_cleanup_r+0x8>)
 800285a:	f000 b885 	b.w	8002968 <_fwalk_reent>
 800285e:	bf00      	nop
 8002860:	0800335d 	.word	0x0800335d

08002864 <__sfmoreglue>:
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	2568      	movs	r5, #104	; 0x68
 8002868:	1e4a      	subs	r2, r1, #1
 800286a:	4355      	muls	r5, r2
 800286c:	460e      	mov	r6, r1
 800286e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002872:	f000 f897 	bl	80029a4 <_malloc_r>
 8002876:	4604      	mov	r4, r0
 8002878:	b140      	cbz	r0, 800288c <__sfmoreglue+0x28>
 800287a:	2100      	movs	r1, #0
 800287c:	e9c0 1600 	strd	r1, r6, [r0]
 8002880:	300c      	adds	r0, #12
 8002882:	60a0      	str	r0, [r4, #8]
 8002884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002888:	f7ff ffa2 	bl	80027d0 <memset>
 800288c:	4620      	mov	r0, r4
 800288e:	bd70      	pop	{r4, r5, r6, pc}

08002890 <__sinit>:
 8002890:	6983      	ldr	r3, [r0, #24]
 8002892:	b510      	push	{r4, lr}
 8002894:	4604      	mov	r4, r0
 8002896:	bb33      	cbnz	r3, 80028e6 <__sinit+0x56>
 8002898:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800289c:	6503      	str	r3, [r0, #80]	; 0x50
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <__sinit+0x58>)
 80028a0:	4a12      	ldr	r2, [pc, #72]	; (80028ec <__sinit+0x5c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6282      	str	r2, [r0, #40]	; 0x28
 80028a6:	4298      	cmp	r0, r3
 80028a8:	bf04      	itt	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	6183      	streq	r3, [r0, #24]
 80028ae:	f000 f81f 	bl	80028f0 <__sfp>
 80028b2:	6060      	str	r0, [r4, #4]
 80028b4:	4620      	mov	r0, r4
 80028b6:	f000 f81b 	bl	80028f0 <__sfp>
 80028ba:	60a0      	str	r0, [r4, #8]
 80028bc:	4620      	mov	r0, r4
 80028be:	f000 f817 	bl	80028f0 <__sfp>
 80028c2:	2200      	movs	r2, #0
 80028c4:	60e0      	str	r0, [r4, #12]
 80028c6:	2104      	movs	r1, #4
 80028c8:	6860      	ldr	r0, [r4, #4]
 80028ca:	f7ff ffa1 	bl	8002810 <std>
 80028ce:	2201      	movs	r2, #1
 80028d0:	2109      	movs	r1, #9
 80028d2:	68a0      	ldr	r0, [r4, #8]
 80028d4:	f7ff ff9c 	bl	8002810 <std>
 80028d8:	2202      	movs	r2, #2
 80028da:	2112      	movs	r1, #18
 80028dc:	68e0      	ldr	r0, [r4, #12]
 80028de:	f7ff ff97 	bl	8002810 <std>
 80028e2:	2301      	movs	r3, #1
 80028e4:	61a3      	str	r3, [r4, #24]
 80028e6:	bd10      	pop	{r4, pc}
 80028e8:	08003620 	.word	0x08003620
 80028ec:	08002859 	.word	0x08002859

080028f0 <__sfp>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <__sfp+0x70>)
 80028f4:	4607      	mov	r7, r0
 80028f6:	681e      	ldr	r6, [r3, #0]
 80028f8:	69b3      	ldr	r3, [r6, #24]
 80028fa:	b913      	cbnz	r3, 8002902 <__sfp+0x12>
 80028fc:	4630      	mov	r0, r6
 80028fe:	f7ff ffc7 	bl	8002890 <__sinit>
 8002902:	3648      	adds	r6, #72	; 0x48
 8002904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002908:	3b01      	subs	r3, #1
 800290a:	d503      	bpl.n	8002914 <__sfp+0x24>
 800290c:	6833      	ldr	r3, [r6, #0]
 800290e:	b133      	cbz	r3, 800291e <__sfp+0x2e>
 8002910:	6836      	ldr	r6, [r6, #0]
 8002912:	e7f7      	b.n	8002904 <__sfp+0x14>
 8002914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002918:	b16d      	cbz	r5, 8002936 <__sfp+0x46>
 800291a:	3468      	adds	r4, #104	; 0x68
 800291c:	e7f4      	b.n	8002908 <__sfp+0x18>
 800291e:	2104      	movs	r1, #4
 8002920:	4638      	mov	r0, r7
 8002922:	f7ff ff9f 	bl	8002864 <__sfmoreglue>
 8002926:	6030      	str	r0, [r6, #0]
 8002928:	2800      	cmp	r0, #0
 800292a:	d1f1      	bne.n	8002910 <__sfp+0x20>
 800292c:	230c      	movs	r3, #12
 800292e:	4604      	mov	r4, r0
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4620      	mov	r0, r4
 8002934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <__sfp+0x74>)
 8002938:	6665      	str	r5, [r4, #100]	; 0x64
 800293a:	e9c4 5500 	strd	r5, r5, [r4]
 800293e:	60a5      	str	r5, [r4, #8]
 8002940:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002944:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002948:	2208      	movs	r2, #8
 800294a:	4629      	mov	r1, r5
 800294c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002950:	f7ff ff3e 	bl	80027d0 <memset>
 8002954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800295c:	e7e9      	b.n	8002932 <__sfp+0x42>
 800295e:	bf00      	nop
 8002960:	08003620 	.word	0x08003620
 8002964:	ffff0001 	.word	0xffff0001

08002968 <_fwalk_reent>:
 8002968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800296c:	4680      	mov	r8, r0
 800296e:	4689      	mov	r9, r1
 8002970:	2600      	movs	r6, #0
 8002972:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002976:	b914      	cbnz	r4, 800297e <_fwalk_reent+0x16>
 8002978:	4630      	mov	r0, r6
 800297a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800297e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002982:	3f01      	subs	r7, #1
 8002984:	d501      	bpl.n	800298a <_fwalk_reent+0x22>
 8002986:	6824      	ldr	r4, [r4, #0]
 8002988:	e7f5      	b.n	8002976 <_fwalk_reent+0xe>
 800298a:	89ab      	ldrh	r3, [r5, #12]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d907      	bls.n	80029a0 <_fwalk_reent+0x38>
 8002990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002994:	3301      	adds	r3, #1
 8002996:	d003      	beq.n	80029a0 <_fwalk_reent+0x38>
 8002998:	4629      	mov	r1, r5
 800299a:	4640      	mov	r0, r8
 800299c:	47c8      	blx	r9
 800299e:	4306      	orrs	r6, r0
 80029a0:	3568      	adds	r5, #104	; 0x68
 80029a2:	e7ee      	b.n	8002982 <_fwalk_reent+0x1a>

080029a4 <_malloc_r>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	1ccd      	adds	r5, r1, #3
 80029a8:	f025 0503 	bic.w	r5, r5, #3
 80029ac:	3508      	adds	r5, #8
 80029ae:	2d0c      	cmp	r5, #12
 80029b0:	bf38      	it	cc
 80029b2:	250c      	movcc	r5, #12
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	4606      	mov	r6, r0
 80029b8:	db01      	blt.n	80029be <_malloc_r+0x1a>
 80029ba:	42a9      	cmp	r1, r5
 80029bc:	d903      	bls.n	80029c6 <_malloc_r+0x22>
 80029be:	230c      	movs	r3, #12
 80029c0:	6033      	str	r3, [r6, #0]
 80029c2:	2000      	movs	r0, #0
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	f000 fd77 	bl	80034b8 <__malloc_lock>
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <_malloc_r+0xac>)
 80029cc:	6814      	ldr	r4, [r2, #0]
 80029ce:	4621      	mov	r1, r4
 80029d0:	b991      	cbnz	r1, 80029f8 <_malloc_r+0x54>
 80029d2:	4c20      	ldr	r4, [pc, #128]	; (8002a54 <_malloc_r+0xb0>)
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	b91b      	cbnz	r3, 80029e0 <_malloc_r+0x3c>
 80029d8:	4630      	mov	r0, r6
 80029da:	f000 fb03 	bl	8002fe4 <_sbrk_r>
 80029de:	6020      	str	r0, [r4, #0]
 80029e0:	4629      	mov	r1, r5
 80029e2:	4630      	mov	r0, r6
 80029e4:	f000 fafe 	bl	8002fe4 <_sbrk_r>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d124      	bne.n	8002a36 <_malloc_r+0x92>
 80029ec:	230c      	movs	r3, #12
 80029ee:	4630      	mov	r0, r6
 80029f0:	6033      	str	r3, [r6, #0]
 80029f2:	f000 fd62 	bl	80034ba <__malloc_unlock>
 80029f6:	e7e4      	b.n	80029c2 <_malloc_r+0x1e>
 80029f8:	680b      	ldr	r3, [r1, #0]
 80029fa:	1b5b      	subs	r3, r3, r5
 80029fc:	d418      	bmi.n	8002a30 <_malloc_r+0x8c>
 80029fe:	2b0b      	cmp	r3, #11
 8002a00:	d90f      	bls.n	8002a22 <_malloc_r+0x7e>
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	18cc      	adds	r4, r1, r3
 8002a06:	50cd      	str	r5, [r1, r3]
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f000 fd56 	bl	80034ba <__malloc_unlock>
 8002a0e:	f104 000b 	add.w	r0, r4, #11
 8002a12:	1d23      	adds	r3, r4, #4
 8002a14:	f020 0007 	bic.w	r0, r0, #7
 8002a18:	1ac3      	subs	r3, r0, r3
 8002a1a:	d0d3      	beq.n	80029c4 <_malloc_r+0x20>
 8002a1c:	425a      	negs	r2, r3
 8002a1e:	50e2      	str	r2, [r4, r3]
 8002a20:	e7d0      	b.n	80029c4 <_malloc_r+0x20>
 8002a22:	684b      	ldr	r3, [r1, #4]
 8002a24:	428c      	cmp	r4, r1
 8002a26:	bf16      	itet	ne
 8002a28:	6063      	strne	r3, [r4, #4]
 8002a2a:	6013      	streq	r3, [r2, #0]
 8002a2c:	460c      	movne	r4, r1
 8002a2e:	e7eb      	b.n	8002a08 <_malloc_r+0x64>
 8002a30:	460c      	mov	r4, r1
 8002a32:	6849      	ldr	r1, [r1, #4]
 8002a34:	e7cc      	b.n	80029d0 <_malloc_r+0x2c>
 8002a36:	1cc4      	adds	r4, r0, #3
 8002a38:	f024 0403 	bic.w	r4, r4, #3
 8002a3c:	42a0      	cmp	r0, r4
 8002a3e:	d005      	beq.n	8002a4c <_malloc_r+0xa8>
 8002a40:	1a21      	subs	r1, r4, r0
 8002a42:	4630      	mov	r0, r6
 8002a44:	f000 face 	bl	8002fe4 <_sbrk_r>
 8002a48:	3001      	adds	r0, #1
 8002a4a:	d0cf      	beq.n	80029ec <_malloc_r+0x48>
 8002a4c:	6025      	str	r5, [r4, #0]
 8002a4e:	e7db      	b.n	8002a08 <_malloc_r+0x64>
 8002a50:	20000098 	.word	0x20000098
 8002a54:	2000009c 	.word	0x2000009c

08002a58 <__sfputc_r>:
 8002a58:	6893      	ldr	r3, [r2, #8]
 8002a5a:	b410      	push	{r4}
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	da07      	bge.n	8002a74 <__sfputc_r+0x1c>
 8002a64:	6994      	ldr	r4, [r2, #24]
 8002a66:	42a3      	cmp	r3, r4
 8002a68:	db01      	blt.n	8002a6e <__sfputc_r+0x16>
 8002a6a:	290a      	cmp	r1, #10
 8002a6c:	d102      	bne.n	8002a74 <__sfputc_r+0x1c>
 8002a6e:	bc10      	pop	{r4}
 8002a70:	f000 bb0c 	b.w	800308c <__swbuf_r>
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	1c58      	adds	r0, r3, #1
 8002a78:	6010      	str	r0, [r2, #0]
 8002a7a:	7019      	strb	r1, [r3, #0]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	bc10      	pop	{r4}
 8002a80:	4770      	bx	lr

08002a82 <__sfputs_r>:
 8002a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a84:	4606      	mov	r6, r0
 8002a86:	460f      	mov	r7, r1
 8002a88:	4614      	mov	r4, r2
 8002a8a:	18d5      	adds	r5, r2, r3
 8002a8c:	42ac      	cmp	r4, r5
 8002a8e:	d101      	bne.n	8002a94 <__sfputs_r+0x12>
 8002a90:	2000      	movs	r0, #0
 8002a92:	e007      	b.n	8002aa4 <__sfputs_r+0x22>
 8002a94:	463a      	mov	r2, r7
 8002a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f7ff ffdc 	bl	8002a58 <__sfputc_r>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d1f3      	bne.n	8002a8c <__sfputs_r+0xa>
 8002aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002aa8 <_vfiprintf_r>:
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	460c      	mov	r4, r1
 8002aae:	b09d      	sub	sp, #116	; 0x74
 8002ab0:	4617      	mov	r7, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	b118      	cbz	r0, 8002ac0 <_vfiprintf_r+0x18>
 8002ab8:	6983      	ldr	r3, [r0, #24]
 8002aba:	b90b      	cbnz	r3, 8002ac0 <_vfiprintf_r+0x18>
 8002abc:	f7ff fee8 	bl	8002890 <__sinit>
 8002ac0:	4b7c      	ldr	r3, [pc, #496]	; (8002cb4 <_vfiprintf_r+0x20c>)
 8002ac2:	429c      	cmp	r4, r3
 8002ac4:	d158      	bne.n	8002b78 <_vfiprintf_r+0xd0>
 8002ac6:	6874      	ldr	r4, [r6, #4]
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	0718      	lsls	r0, r3, #28
 8002acc:	d55e      	bpl.n	8002b8c <_vfiprintf_r+0xe4>
 8002ace:	6923      	ldr	r3, [r4, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d05b      	beq.n	8002b8c <_vfiprintf_r+0xe4>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad8:	2320      	movs	r3, #32
 8002ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ade:	2330      	movs	r3, #48	; 0x30
 8002ae0:	f04f 0b01 	mov.w	fp, #1
 8002ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ae8:	9503      	str	r5, [sp, #12]
 8002aea:	46b8      	mov	r8, r7
 8002aec:	4645      	mov	r5, r8
 8002aee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002af2:	b10b      	cbz	r3, 8002af8 <_vfiprintf_r+0x50>
 8002af4:	2b25      	cmp	r3, #37	; 0x25
 8002af6:	d154      	bne.n	8002ba2 <_vfiprintf_r+0xfa>
 8002af8:	ebb8 0a07 	subs.w	sl, r8, r7
 8002afc:	d00b      	beq.n	8002b16 <_vfiprintf_r+0x6e>
 8002afe:	4653      	mov	r3, sl
 8002b00:	463a      	mov	r2, r7
 8002b02:	4621      	mov	r1, r4
 8002b04:	4630      	mov	r0, r6
 8002b06:	f7ff ffbc 	bl	8002a82 <__sfputs_r>
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	f000 80c2 	beq.w	8002c94 <_vfiprintf_r+0x1ec>
 8002b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b12:	4453      	add	r3, sl
 8002b14:	9309      	str	r3, [sp, #36]	; 0x24
 8002b16:	f898 3000 	ldrb.w	r3, [r8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80ba 	beq.w	8002c94 <_vfiprintf_r+0x1ec>
 8002b20:	2300      	movs	r3, #0
 8002b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b2a:	9304      	str	r3, [sp, #16]
 8002b2c:	9307      	str	r3, [sp, #28]
 8002b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b32:	931a      	str	r3, [sp, #104]	; 0x68
 8002b34:	46a8      	mov	r8, r5
 8002b36:	2205      	movs	r2, #5
 8002b38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002b3c:	485e      	ldr	r0, [pc, #376]	; (8002cb8 <_vfiprintf_r+0x210>)
 8002b3e:	f000 fcad 	bl	800349c <memchr>
 8002b42:	9b04      	ldr	r3, [sp, #16]
 8002b44:	bb78      	cbnz	r0, 8002ba6 <_vfiprintf_r+0xfe>
 8002b46:	06d9      	lsls	r1, r3, #27
 8002b48:	bf44      	itt	mi
 8002b4a:	2220      	movmi	r2, #32
 8002b4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b50:	071a      	lsls	r2, r3, #28
 8002b52:	bf44      	itt	mi
 8002b54:	222b      	movmi	r2, #43	; 0x2b
 8002b56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b5a:	782a      	ldrb	r2, [r5, #0]
 8002b5c:	2a2a      	cmp	r2, #42	; 0x2a
 8002b5e:	d02a      	beq.n	8002bb6 <_vfiprintf_r+0x10e>
 8002b60:	46a8      	mov	r8, r5
 8002b62:	2000      	movs	r0, #0
 8002b64:	250a      	movs	r5, #10
 8002b66:	9a07      	ldr	r2, [sp, #28]
 8002b68:	4641      	mov	r1, r8
 8002b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b6e:	3b30      	subs	r3, #48	; 0x30
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d969      	bls.n	8002c48 <_vfiprintf_r+0x1a0>
 8002b74:	b360      	cbz	r0, 8002bd0 <_vfiprintf_r+0x128>
 8002b76:	e024      	b.n	8002bc2 <_vfiprintf_r+0x11a>
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <_vfiprintf_r+0x214>)
 8002b7a:	429c      	cmp	r4, r3
 8002b7c:	d101      	bne.n	8002b82 <_vfiprintf_r+0xda>
 8002b7e:	68b4      	ldr	r4, [r6, #8]
 8002b80:	e7a2      	b.n	8002ac8 <_vfiprintf_r+0x20>
 8002b82:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <_vfiprintf_r+0x218>)
 8002b84:	429c      	cmp	r4, r3
 8002b86:	bf08      	it	eq
 8002b88:	68f4      	ldreq	r4, [r6, #12]
 8002b8a:	e79d      	b.n	8002ac8 <_vfiprintf_r+0x20>
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	4630      	mov	r0, r6
 8002b90:	f000 fae0 	bl	8003154 <__swsetup_r>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d09d      	beq.n	8002ad4 <_vfiprintf_r+0x2c>
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b9c:	b01d      	add	sp, #116	; 0x74
 8002b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba2:	46a8      	mov	r8, r5
 8002ba4:	e7a2      	b.n	8002aec <_vfiprintf_r+0x44>
 8002ba6:	4a44      	ldr	r2, [pc, #272]	; (8002cb8 <_vfiprintf_r+0x210>)
 8002ba8:	4645      	mov	r5, r8
 8002baa:	1a80      	subs	r0, r0, r2
 8002bac:	fa0b f000 	lsl.w	r0, fp, r0
 8002bb0:	4318      	orrs	r0, r3
 8002bb2:	9004      	str	r0, [sp, #16]
 8002bb4:	e7be      	b.n	8002b34 <_vfiprintf_r+0x8c>
 8002bb6:	9a03      	ldr	r2, [sp, #12]
 8002bb8:	1d11      	adds	r1, r2, #4
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	9103      	str	r1, [sp, #12]
 8002bbe:	2a00      	cmp	r2, #0
 8002bc0:	db01      	blt.n	8002bc6 <_vfiprintf_r+0x11e>
 8002bc2:	9207      	str	r2, [sp, #28]
 8002bc4:	e004      	b.n	8002bd0 <_vfiprintf_r+0x128>
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	9207      	str	r2, [sp, #28]
 8002bce:	9304      	str	r3, [sp, #16]
 8002bd0:	f898 3000 	ldrb.w	r3, [r8]
 8002bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd6:	d10e      	bne.n	8002bf6 <_vfiprintf_r+0x14e>
 8002bd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bde:	d138      	bne.n	8002c52 <_vfiprintf_r+0x1aa>
 8002be0:	9b03      	ldr	r3, [sp, #12]
 8002be2:	f108 0802 	add.w	r8, r8, #2
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	9203      	str	r2, [sp, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bfb8      	it	lt
 8002bf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bf4:	9305      	str	r3, [sp, #20]
 8002bf6:	4d33      	ldr	r5, [pc, #204]	; (8002cc4 <_vfiprintf_r+0x21c>)
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	f898 1000 	ldrb.w	r1, [r8]
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f000 fc4c 	bl	800349c <memchr>
 8002c04:	b140      	cbz	r0, 8002c18 <_vfiprintf_r+0x170>
 8002c06:	2340      	movs	r3, #64	; 0x40
 8002c08:	1b40      	subs	r0, r0, r5
 8002c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c0e:	9b04      	ldr	r3, [sp, #16]
 8002c10:	f108 0801 	add.w	r8, r8, #1
 8002c14:	4303      	orrs	r3, r0
 8002c16:	9304      	str	r3, [sp, #16]
 8002c18:	f898 1000 	ldrb.w	r1, [r8]
 8002c1c:	2206      	movs	r2, #6
 8002c1e:	482a      	ldr	r0, [pc, #168]	; (8002cc8 <_vfiprintf_r+0x220>)
 8002c20:	f108 0701 	add.w	r7, r8, #1
 8002c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c28:	f000 fc38 	bl	800349c <memchr>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d037      	beq.n	8002ca0 <_vfiprintf_r+0x1f8>
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <_vfiprintf_r+0x224>)
 8002c32:	bb1b      	cbnz	r3, 8002c7c <_vfiprintf_r+0x1d4>
 8002c34:	9b03      	ldr	r3, [sp, #12]
 8002c36:	3307      	adds	r3, #7
 8002c38:	f023 0307 	bic.w	r3, r3, #7
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c42:	444b      	add	r3, r9
 8002c44:	9309      	str	r3, [sp, #36]	; 0x24
 8002c46:	e750      	b.n	8002aea <_vfiprintf_r+0x42>
 8002c48:	fb05 3202 	mla	r2, r5, r2, r3
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	4688      	mov	r8, r1
 8002c50:	e78a      	b.n	8002b68 <_vfiprintf_r+0xc0>
 8002c52:	2300      	movs	r3, #0
 8002c54:	250a      	movs	r5, #10
 8002c56:	4619      	mov	r1, r3
 8002c58:	f108 0801 	add.w	r8, r8, #1
 8002c5c:	9305      	str	r3, [sp, #20]
 8002c5e:	4640      	mov	r0, r8
 8002c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c64:	3a30      	subs	r2, #48	; 0x30
 8002c66:	2a09      	cmp	r2, #9
 8002c68:	d903      	bls.n	8002c72 <_vfiprintf_r+0x1ca>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0c3      	beq.n	8002bf6 <_vfiprintf_r+0x14e>
 8002c6e:	9105      	str	r1, [sp, #20]
 8002c70:	e7c1      	b.n	8002bf6 <_vfiprintf_r+0x14e>
 8002c72:	fb05 2101 	mla	r1, r5, r1, r2
 8002c76:	2301      	movs	r3, #1
 8002c78:	4680      	mov	r8, r0
 8002c7a:	e7f0      	b.n	8002c5e <_vfiprintf_r+0x1b6>
 8002c7c:	ab03      	add	r3, sp, #12
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4622      	mov	r2, r4
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <_vfiprintf_r+0x228>)
 8002c84:	a904      	add	r1, sp, #16
 8002c86:	4630      	mov	r0, r6
 8002c88:	f3af 8000 	nop.w
 8002c8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002c90:	4681      	mov	r9, r0
 8002c92:	d1d5      	bne.n	8002c40 <_vfiprintf_r+0x198>
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	065b      	lsls	r3, r3, #25
 8002c98:	f53f af7e 	bmi.w	8002b98 <_vfiprintf_r+0xf0>
 8002c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c9e:	e77d      	b.n	8002b9c <_vfiprintf_r+0xf4>
 8002ca0:	ab03      	add	r3, sp, #12
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <_vfiprintf_r+0x228>)
 8002ca8:	a904      	add	r1, sp, #16
 8002caa:	4630      	mov	r0, r6
 8002cac:	f000 f888 	bl	8002dc0 <_printf_i>
 8002cb0:	e7ec      	b.n	8002c8c <_vfiprintf_r+0x1e4>
 8002cb2:	bf00      	nop
 8002cb4:	08003644 	.word	0x08003644
 8002cb8:	08003684 	.word	0x08003684
 8002cbc:	08003664 	.word	0x08003664
 8002cc0:	08003624 	.word	0x08003624
 8002cc4:	0800368a 	.word	0x0800368a
 8002cc8:	0800368e 	.word	0x0800368e
 8002ccc:	00000000 	.word	0x00000000
 8002cd0:	08002a83 	.word	0x08002a83

08002cd4 <_printf_common>:
 8002cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	4691      	mov	r9, r2
 8002cda:	461f      	mov	r7, r3
 8002cdc:	688a      	ldr	r2, [r1, #8]
 8002cde:	690b      	ldr	r3, [r1, #16]
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	bfb8      	it	lt
 8002ce6:	4613      	movlt	r3, r2
 8002ce8:	f8c9 3000 	str.w	r3, [r9]
 8002cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cf6:	b112      	cbz	r2, 8002cfe <_printf_common+0x2a>
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8c9 3000 	str.w	r3, [r9]
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	0699      	lsls	r1, r3, #26
 8002d02:	bf42      	ittt	mi
 8002d04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d08:	3302      	addmi	r3, #2
 8002d0a:	f8c9 3000 	strmi.w	r3, [r9]
 8002d0e:	6825      	ldr	r5, [r4, #0]
 8002d10:	f015 0506 	ands.w	r5, r5, #6
 8002d14:	d107      	bne.n	8002d26 <_printf_common+0x52>
 8002d16:	f104 0a19 	add.w	sl, r4, #25
 8002d1a:	68e3      	ldr	r3, [r4, #12]
 8002d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	42ab      	cmp	r3, r5
 8002d24:	dc29      	bgt.n	8002d7a <_printf_common+0xa6>
 8002d26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d2a:	6822      	ldr	r2, [r4, #0]
 8002d2c:	3300      	adds	r3, #0
 8002d2e:	bf18      	it	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	0692      	lsls	r2, r2, #26
 8002d34:	d42e      	bmi.n	8002d94 <_printf_common+0xc0>
 8002d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d3a:	4639      	mov	r1, r7
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	47c0      	blx	r8
 8002d40:	3001      	adds	r0, #1
 8002d42:	d021      	beq.n	8002d88 <_printf_common+0xb4>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	68e5      	ldr	r5, [r4, #12]
 8002d48:	f003 0306 	and.w	r3, r3, #6
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	bf18      	it	ne
 8002d50:	2500      	movne	r5, #0
 8002d52:	f8d9 2000 	ldr.w	r2, [r9]
 8002d56:	f04f 0900 	mov.w	r9, #0
 8002d5a:	bf08      	it	eq
 8002d5c:	1aad      	subeq	r5, r5, r2
 8002d5e:	68a3      	ldr	r3, [r4, #8]
 8002d60:	6922      	ldr	r2, [r4, #16]
 8002d62:	bf08      	it	eq
 8002d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bfc4      	itt	gt
 8002d6c:	1a9b      	subgt	r3, r3, r2
 8002d6e:	18ed      	addgt	r5, r5, r3
 8002d70:	341a      	adds	r4, #26
 8002d72:	454d      	cmp	r5, r9
 8002d74:	d11a      	bne.n	8002dac <_printf_common+0xd8>
 8002d76:	2000      	movs	r0, #0
 8002d78:	e008      	b.n	8002d8c <_printf_common+0xb8>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4652      	mov	r2, sl
 8002d7e:	4639      	mov	r1, r7
 8002d80:	4630      	mov	r0, r6
 8002d82:	47c0      	blx	r8
 8002d84:	3001      	adds	r0, #1
 8002d86:	d103      	bne.n	8002d90 <_printf_common+0xbc>
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d90:	3501      	adds	r5, #1
 8002d92:	e7c2      	b.n	8002d1a <_printf_common+0x46>
 8002d94:	2030      	movs	r0, #48	; 0x30
 8002d96:	18e1      	adds	r1, r4, r3
 8002d98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002da2:	4422      	add	r2, r4
 8002da4:	3302      	adds	r3, #2
 8002da6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002daa:	e7c4      	b.n	8002d36 <_printf_common+0x62>
 8002dac:	2301      	movs	r3, #1
 8002dae:	4622      	mov	r2, r4
 8002db0:	4639      	mov	r1, r7
 8002db2:	4630      	mov	r0, r6
 8002db4:	47c0      	blx	r8
 8002db6:	3001      	adds	r0, #1
 8002db8:	d0e6      	beq.n	8002d88 <_printf_common+0xb4>
 8002dba:	f109 0901 	add.w	r9, r9, #1
 8002dbe:	e7d8      	b.n	8002d72 <_printf_common+0x9e>

08002dc0 <_printf_i>:
 8002dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002dc8:	460c      	mov	r4, r1
 8002dca:	7e09      	ldrb	r1, [r1, #24]
 8002dcc:	b085      	sub	sp, #20
 8002dce:	296e      	cmp	r1, #110	; 0x6e
 8002dd0:	4617      	mov	r7, r2
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002dd8:	f000 80b3 	beq.w	8002f42 <_printf_i+0x182>
 8002ddc:	d822      	bhi.n	8002e24 <_printf_i+0x64>
 8002dde:	2963      	cmp	r1, #99	; 0x63
 8002de0:	d036      	beq.n	8002e50 <_printf_i+0x90>
 8002de2:	d80a      	bhi.n	8002dfa <_printf_i+0x3a>
 8002de4:	2900      	cmp	r1, #0
 8002de6:	f000 80b9 	beq.w	8002f5c <_printf_i+0x19c>
 8002dea:	2958      	cmp	r1, #88	; 0x58
 8002dec:	f000 8083 	beq.w	8002ef6 <_printf_i+0x136>
 8002df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002df4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002df8:	e032      	b.n	8002e60 <_printf_i+0xa0>
 8002dfa:	2964      	cmp	r1, #100	; 0x64
 8002dfc:	d001      	beq.n	8002e02 <_printf_i+0x42>
 8002dfe:	2969      	cmp	r1, #105	; 0x69
 8002e00:	d1f6      	bne.n	8002df0 <_printf_i+0x30>
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	0605      	lsls	r5, r0, #24
 8002e08:	f103 0104 	add.w	r1, r3, #4
 8002e0c:	d52a      	bpl.n	8002e64 <_printf_i+0xa4>
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da03      	bge.n	8002e1e <_printf_i+0x5e>
 8002e16:	222d      	movs	r2, #45	; 0x2d
 8002e18:	425b      	negs	r3, r3
 8002e1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e1e:	486f      	ldr	r0, [pc, #444]	; (8002fdc <_printf_i+0x21c>)
 8002e20:	220a      	movs	r2, #10
 8002e22:	e039      	b.n	8002e98 <_printf_i+0xd8>
 8002e24:	2973      	cmp	r1, #115	; 0x73
 8002e26:	f000 809d 	beq.w	8002f64 <_printf_i+0x1a4>
 8002e2a:	d808      	bhi.n	8002e3e <_printf_i+0x7e>
 8002e2c:	296f      	cmp	r1, #111	; 0x6f
 8002e2e:	d020      	beq.n	8002e72 <_printf_i+0xb2>
 8002e30:	2970      	cmp	r1, #112	; 0x70
 8002e32:	d1dd      	bne.n	8002df0 <_printf_i+0x30>
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	f043 0320 	orr.w	r3, r3, #32
 8002e3a:	6023      	str	r3, [r4, #0]
 8002e3c:	e003      	b.n	8002e46 <_printf_i+0x86>
 8002e3e:	2975      	cmp	r1, #117	; 0x75
 8002e40:	d017      	beq.n	8002e72 <_printf_i+0xb2>
 8002e42:	2978      	cmp	r1, #120	; 0x78
 8002e44:	d1d4      	bne.n	8002df0 <_printf_i+0x30>
 8002e46:	2378      	movs	r3, #120	; 0x78
 8002e48:	4865      	ldr	r0, [pc, #404]	; (8002fe0 <_printf_i+0x220>)
 8002e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e4e:	e055      	b.n	8002efc <_printf_i+0x13c>
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e56:	1d19      	adds	r1, r3, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6011      	str	r1, [r2, #0]
 8002e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e60:	2301      	movs	r3, #1
 8002e62:	e08c      	b.n	8002f7e <_printf_i+0x1be>
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e6a:	6011      	str	r1, [r2, #0]
 8002e6c:	bf18      	it	ne
 8002e6e:	b21b      	sxthne	r3, r3
 8002e70:	e7cf      	b.n	8002e12 <_printf_i+0x52>
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	6825      	ldr	r5, [r4, #0]
 8002e76:	1d18      	adds	r0, r3, #4
 8002e78:	6010      	str	r0, [r2, #0]
 8002e7a:	0628      	lsls	r0, r5, #24
 8002e7c:	d501      	bpl.n	8002e82 <_printf_i+0xc2>
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e002      	b.n	8002e88 <_printf_i+0xc8>
 8002e82:	0668      	lsls	r0, r5, #25
 8002e84:	d5fb      	bpl.n	8002e7e <_printf_i+0xbe>
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	296f      	cmp	r1, #111	; 0x6f
 8002e8a:	bf14      	ite	ne
 8002e8c:	220a      	movne	r2, #10
 8002e8e:	2208      	moveq	r2, #8
 8002e90:	4852      	ldr	r0, [pc, #328]	; (8002fdc <_printf_i+0x21c>)
 8002e92:	2100      	movs	r1, #0
 8002e94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e98:	6865      	ldr	r5, [r4, #4]
 8002e9a:	2d00      	cmp	r5, #0
 8002e9c:	60a5      	str	r5, [r4, #8]
 8002e9e:	f2c0 8095 	blt.w	8002fcc <_printf_i+0x20c>
 8002ea2:	6821      	ldr	r1, [r4, #0]
 8002ea4:	f021 0104 	bic.w	r1, r1, #4
 8002ea8:	6021      	str	r1, [r4, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d13d      	bne.n	8002f2a <_printf_i+0x16a>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	f040 808e 	bne.w	8002fd0 <_printf_i+0x210>
 8002eb4:	4665      	mov	r5, ip
 8002eb6:	2a08      	cmp	r2, #8
 8002eb8:	d10b      	bne.n	8002ed2 <_printf_i+0x112>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	07db      	lsls	r3, r3, #31
 8002ebe:	d508      	bpl.n	8002ed2 <_printf_i+0x112>
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	6862      	ldr	r2, [r4, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	bfde      	ittt	le
 8002ec8:	2330      	movle	r3, #48	; 0x30
 8002eca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ece:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ed2:	ebac 0305 	sub.w	r3, ip, r5
 8002ed6:	6123      	str	r3, [r4, #16]
 8002ed8:	f8cd 8000 	str.w	r8, [sp]
 8002edc:	463b      	mov	r3, r7
 8002ede:	aa03      	add	r2, sp, #12
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f7ff fef6 	bl	8002cd4 <_printf_common>
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d14d      	bne.n	8002f88 <_printf_i+0x1c8>
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef0:	b005      	add	sp, #20
 8002ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <_printf_i+0x21c>)
 8002ef8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002efc:	6813      	ldr	r3, [r2, #0]
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	1d1d      	adds	r5, r3, #4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6015      	str	r5, [r2, #0]
 8002f06:	060a      	lsls	r2, r1, #24
 8002f08:	d50b      	bpl.n	8002f22 <_printf_i+0x162>
 8002f0a:	07ca      	lsls	r2, r1, #31
 8002f0c:	bf44      	itt	mi
 8002f0e:	f041 0120 	orrmi.w	r1, r1, #32
 8002f12:	6021      	strmi	r1, [r4, #0]
 8002f14:	b91b      	cbnz	r3, 8002f1e <_printf_i+0x15e>
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	f022 0220 	bic.w	r2, r2, #32
 8002f1c:	6022      	str	r2, [r4, #0]
 8002f1e:	2210      	movs	r2, #16
 8002f20:	e7b7      	b.n	8002e92 <_printf_i+0xd2>
 8002f22:	064d      	lsls	r5, r1, #25
 8002f24:	bf48      	it	mi
 8002f26:	b29b      	uxthmi	r3, r3
 8002f28:	e7ef      	b.n	8002f0a <_printf_i+0x14a>
 8002f2a:	4665      	mov	r5, ip
 8002f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f30:	fb02 3311 	mls	r3, r2, r1, r3
 8002f34:	5cc3      	ldrb	r3, [r0, r3]
 8002f36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d1f5      	bne.n	8002f2c <_printf_i+0x16c>
 8002f40:	e7b9      	b.n	8002eb6 <_printf_i+0xf6>
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	6825      	ldr	r5, [r4, #0]
 8002f46:	1d18      	adds	r0, r3, #4
 8002f48:	6961      	ldr	r1, [r4, #20]
 8002f4a:	6010      	str	r0, [r2, #0]
 8002f4c:	0628      	lsls	r0, r5, #24
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	d501      	bpl.n	8002f56 <_printf_i+0x196>
 8002f52:	6019      	str	r1, [r3, #0]
 8002f54:	e002      	b.n	8002f5c <_printf_i+0x19c>
 8002f56:	066a      	lsls	r2, r5, #25
 8002f58:	d5fb      	bpl.n	8002f52 <_printf_i+0x192>
 8002f5a:	8019      	strh	r1, [r3, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	4665      	mov	r5, ip
 8002f60:	6123      	str	r3, [r4, #16]
 8002f62:	e7b9      	b.n	8002ed8 <_printf_i+0x118>
 8002f64:	6813      	ldr	r3, [r2, #0]
 8002f66:	1d19      	adds	r1, r3, #4
 8002f68:	6011      	str	r1, [r2, #0]
 8002f6a:	681d      	ldr	r5, [r3, #0]
 8002f6c:	6862      	ldr	r2, [r4, #4]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 fa93 	bl	800349c <memchr>
 8002f76:	b108      	cbz	r0, 8002f7c <_printf_i+0x1bc>
 8002f78:	1b40      	subs	r0, r0, r5
 8002f7a:	6060      	str	r0, [r4, #4]
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	6123      	str	r3, [r4, #16]
 8002f80:	2300      	movs	r3, #0
 8002f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f86:	e7a7      	b.n	8002ed8 <_printf_i+0x118>
 8002f88:	6923      	ldr	r3, [r4, #16]
 8002f8a:	462a      	mov	r2, r5
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4630      	mov	r0, r6
 8002f90:	47c0      	blx	r8
 8002f92:	3001      	adds	r0, #1
 8002f94:	d0aa      	beq.n	8002eec <_printf_i+0x12c>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	079b      	lsls	r3, r3, #30
 8002f9a:	d413      	bmi.n	8002fc4 <_printf_i+0x204>
 8002f9c:	68e0      	ldr	r0, [r4, #12]
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	bfb8      	it	lt
 8002fa4:	4618      	movlt	r0, r3
 8002fa6:	e7a3      	b.n	8002ef0 <_printf_i+0x130>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	464a      	mov	r2, r9
 8002fac:	4639      	mov	r1, r7
 8002fae:	4630      	mov	r0, r6
 8002fb0:	47c0      	blx	r8
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d09a      	beq.n	8002eec <_printf_i+0x12c>
 8002fb6:	3501      	adds	r5, #1
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	9a03      	ldr	r2, [sp, #12]
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	42ab      	cmp	r3, r5
 8002fc0:	dcf2      	bgt.n	8002fa8 <_printf_i+0x1e8>
 8002fc2:	e7eb      	b.n	8002f9c <_printf_i+0x1dc>
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	f104 0919 	add.w	r9, r4, #25
 8002fca:	e7f5      	b.n	8002fb8 <_printf_i+0x1f8>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ac      	bne.n	8002f2a <_printf_i+0x16a>
 8002fd0:	7803      	ldrb	r3, [r0, #0]
 8002fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fda:	e76c      	b.n	8002eb6 <_printf_i+0xf6>
 8002fdc:	08003695 	.word	0x08003695
 8002fe0:	080036a6 	.word	0x080036a6

08002fe4 <_sbrk_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	4c05      	ldr	r4, [pc, #20]	; (8003000 <_sbrk_r+0x1c>)
 8002fea:	4605      	mov	r5, r0
 8002fec:	4608      	mov	r0, r1
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	f7fd fcfe 	bl	80009f0 <_sbrk>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_sbrk_r+0x1a>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_sbrk_r+0x1a>
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	20000148 	.word	0x20000148

08003004 <__sread>:
 8003004:	b510      	push	{r4, lr}
 8003006:	460c      	mov	r4, r1
 8003008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800300c:	f000 faa2 	bl	8003554 <_read_r>
 8003010:	2800      	cmp	r0, #0
 8003012:	bfab      	itete	ge
 8003014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003016:	89a3      	ldrhlt	r3, [r4, #12]
 8003018:	181b      	addge	r3, r3, r0
 800301a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800301e:	bfac      	ite	ge
 8003020:	6563      	strge	r3, [r4, #84]	; 0x54
 8003022:	81a3      	strhlt	r3, [r4, #12]
 8003024:	bd10      	pop	{r4, pc}

08003026 <__swrite>:
 8003026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302a:	461f      	mov	r7, r3
 800302c:	898b      	ldrh	r3, [r1, #12]
 800302e:	4605      	mov	r5, r0
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	460c      	mov	r4, r1
 8003034:	4616      	mov	r6, r2
 8003036:	d505      	bpl.n	8003044 <__swrite+0x1e>
 8003038:	2302      	movs	r3, #2
 800303a:	2200      	movs	r2, #0
 800303c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003040:	f000 f9b6 	bl	80033b0 <_lseek_r>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	4632      	mov	r2, r6
 8003048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003052:	463b      	mov	r3, r7
 8003054:	4628      	mov	r0, r5
 8003056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800305a:	f000 b869 	b.w	8003130 <_write_r>

0800305e <__sseek>:
 800305e:	b510      	push	{r4, lr}
 8003060:	460c      	mov	r4, r1
 8003062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003066:	f000 f9a3 	bl	80033b0 <_lseek_r>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	bf15      	itete	ne
 8003070:	6560      	strne	r0, [r4, #84]	; 0x54
 8003072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800307a:	81a3      	strheq	r3, [r4, #12]
 800307c:	bf18      	it	ne
 800307e:	81a3      	strhne	r3, [r4, #12]
 8003080:	bd10      	pop	{r4, pc}

08003082 <__sclose>:
 8003082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003086:	f000 b8d3 	b.w	8003230 <_close_r>
	...

0800308c <__swbuf_r>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	460e      	mov	r6, r1
 8003090:	4614      	mov	r4, r2
 8003092:	4605      	mov	r5, r0
 8003094:	b118      	cbz	r0, 800309e <__swbuf_r+0x12>
 8003096:	6983      	ldr	r3, [r0, #24]
 8003098:	b90b      	cbnz	r3, 800309e <__swbuf_r+0x12>
 800309a:	f7ff fbf9 	bl	8002890 <__sinit>
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <__swbuf_r+0x98>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d12a      	bne.n	80030fa <__swbuf_r+0x6e>
 80030a4:	686c      	ldr	r4, [r5, #4]
 80030a6:	69a3      	ldr	r3, [r4, #24]
 80030a8:	60a3      	str	r3, [r4, #8]
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	071a      	lsls	r2, r3, #28
 80030ae:	d52e      	bpl.n	800310e <__swbuf_r+0x82>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	b363      	cbz	r3, 800310e <__swbuf_r+0x82>
 80030b4:	6923      	ldr	r3, [r4, #16]
 80030b6:	6820      	ldr	r0, [r4, #0]
 80030b8:	b2f6      	uxtb	r6, r6
 80030ba:	1ac0      	subs	r0, r0, r3
 80030bc:	6963      	ldr	r3, [r4, #20]
 80030be:	4637      	mov	r7, r6
 80030c0:	4283      	cmp	r3, r0
 80030c2:	dc04      	bgt.n	80030ce <__swbuf_r+0x42>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f948 	bl	800335c <_fflush_r>
 80030cc:	bb28      	cbnz	r0, 800311a <__swbuf_r+0x8e>
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	3001      	adds	r0, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60a3      	str	r3, [r4, #8]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	6022      	str	r2, [r4, #0]
 80030dc:	701e      	strb	r6, [r3, #0]
 80030de:	6963      	ldr	r3, [r4, #20]
 80030e0:	4283      	cmp	r3, r0
 80030e2:	d004      	beq.n	80030ee <__swbuf_r+0x62>
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	d519      	bpl.n	800311e <__swbuf_r+0x92>
 80030ea:	2e0a      	cmp	r6, #10
 80030ec:	d117      	bne.n	800311e <__swbuf_r+0x92>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 f933 	bl	800335c <_fflush_r>
 80030f6:	b190      	cbz	r0, 800311e <__swbuf_r+0x92>
 80030f8:	e00f      	b.n	800311a <__swbuf_r+0x8e>
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <__swbuf_r+0x9c>)
 80030fc:	429c      	cmp	r4, r3
 80030fe:	d101      	bne.n	8003104 <__swbuf_r+0x78>
 8003100:	68ac      	ldr	r4, [r5, #8]
 8003102:	e7d0      	b.n	80030a6 <__swbuf_r+0x1a>
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <__swbuf_r+0xa0>)
 8003106:	429c      	cmp	r4, r3
 8003108:	bf08      	it	eq
 800310a:	68ec      	ldreq	r4, [r5, #12]
 800310c:	e7cb      	b.n	80030a6 <__swbuf_r+0x1a>
 800310e:	4621      	mov	r1, r4
 8003110:	4628      	mov	r0, r5
 8003112:	f000 f81f 	bl	8003154 <__swsetup_r>
 8003116:	2800      	cmp	r0, #0
 8003118:	d0cc      	beq.n	80030b4 <__swbuf_r+0x28>
 800311a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800311e:	4638      	mov	r0, r7
 8003120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003122:	bf00      	nop
 8003124:	08003644 	.word	0x08003644
 8003128:	08003664 	.word	0x08003664
 800312c:	08003624 	.word	0x08003624

08003130 <_write_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4605      	mov	r5, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	2200      	movs	r2, #0
 800313a:	4c05      	ldr	r4, [pc, #20]	; (8003150 <_write_r+0x20>)
 800313c:	6022      	str	r2, [r4, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f7fd fc09 	bl	8000956 <_write>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_write_r+0x1e>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	b103      	cbz	r3, 800314e <_write_r+0x1e>
 800314c:	602b      	str	r3, [r5, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20000148 	.word	0x20000148

08003154 <__swsetup_r>:
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <__swsetup_r+0xcc>)
 8003156:	b570      	push	{r4, r5, r6, lr}
 8003158:	681d      	ldr	r5, [r3, #0]
 800315a:	4606      	mov	r6, r0
 800315c:	460c      	mov	r4, r1
 800315e:	b125      	cbz	r5, 800316a <__swsetup_r+0x16>
 8003160:	69ab      	ldr	r3, [r5, #24]
 8003162:	b913      	cbnz	r3, 800316a <__swsetup_r+0x16>
 8003164:	4628      	mov	r0, r5
 8003166:	f7ff fb93 	bl	8002890 <__sinit>
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <__swsetup_r+0xd0>)
 800316c:	429c      	cmp	r4, r3
 800316e:	d10f      	bne.n	8003190 <__swsetup_r+0x3c>
 8003170:	686c      	ldr	r4, [r5, #4]
 8003172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003176:	b29a      	uxth	r2, r3
 8003178:	0715      	lsls	r5, r2, #28
 800317a:	d42c      	bmi.n	80031d6 <__swsetup_r+0x82>
 800317c:	06d0      	lsls	r0, r2, #27
 800317e:	d411      	bmi.n	80031a4 <__swsetup_r+0x50>
 8003180:	2209      	movs	r2, #9
 8003182:	6032      	str	r2, [r6, #0]
 8003184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003188:	81a3      	strh	r3, [r4, #12]
 800318a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800318e:	e03e      	b.n	800320e <__swsetup_r+0xba>
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <__swsetup_r+0xd4>)
 8003192:	429c      	cmp	r4, r3
 8003194:	d101      	bne.n	800319a <__swsetup_r+0x46>
 8003196:	68ac      	ldr	r4, [r5, #8]
 8003198:	e7eb      	b.n	8003172 <__swsetup_r+0x1e>
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <__swsetup_r+0xd8>)
 800319c:	429c      	cmp	r4, r3
 800319e:	bf08      	it	eq
 80031a0:	68ec      	ldreq	r4, [r5, #12]
 80031a2:	e7e6      	b.n	8003172 <__swsetup_r+0x1e>
 80031a4:	0751      	lsls	r1, r2, #29
 80031a6:	d512      	bpl.n	80031ce <__swsetup_r+0x7a>
 80031a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031aa:	b141      	cbz	r1, 80031be <__swsetup_r+0x6a>
 80031ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031b0:	4299      	cmp	r1, r3
 80031b2:	d002      	beq.n	80031ba <__swsetup_r+0x66>
 80031b4:	4630      	mov	r0, r6
 80031b6:	f000 f981 	bl	80034bc <_free_r>
 80031ba:	2300      	movs	r3, #0
 80031bc:	6363      	str	r3, [r4, #52]	; 0x34
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	81a3      	strh	r3, [r4, #12]
 80031d6:	6923      	ldr	r3, [r4, #16]
 80031d8:	b94b      	cbnz	r3, 80031ee <__swsetup_r+0x9a>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e4:	d003      	beq.n	80031ee <__swsetup_r+0x9a>
 80031e6:	4621      	mov	r1, r4
 80031e8:	4630      	mov	r0, r6
 80031ea:	f000 f917 	bl	800341c <__smakebuf_r>
 80031ee:	89a2      	ldrh	r2, [r4, #12]
 80031f0:	f012 0301 	ands.w	r3, r2, #1
 80031f4:	d00c      	beq.n	8003210 <__swsetup_r+0xbc>
 80031f6:	2300      	movs	r3, #0
 80031f8:	60a3      	str	r3, [r4, #8]
 80031fa:	6963      	ldr	r3, [r4, #20]
 80031fc:	425b      	negs	r3, r3
 80031fe:	61a3      	str	r3, [r4, #24]
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	b953      	cbnz	r3, 800321a <__swsetup_r+0xc6>
 8003204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003208:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800320c:	d1ba      	bne.n	8003184 <__swsetup_r+0x30>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	0792      	lsls	r2, r2, #30
 8003212:	bf58      	it	pl
 8003214:	6963      	ldrpl	r3, [r4, #20]
 8003216:	60a3      	str	r3, [r4, #8]
 8003218:	e7f2      	b.n	8003200 <__swsetup_r+0xac>
 800321a:	2000      	movs	r0, #0
 800321c:	e7f7      	b.n	800320e <__swsetup_r+0xba>
 800321e:	bf00      	nop
 8003220:	20000014 	.word	0x20000014
 8003224:	08003644 	.word	0x08003644
 8003228:	08003664 	.word	0x08003664
 800322c:	08003624 	.word	0x08003624

08003230 <_close_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	2300      	movs	r3, #0
 8003234:	4c05      	ldr	r4, [pc, #20]	; (800324c <_close_r+0x1c>)
 8003236:	4605      	mov	r5, r0
 8003238:	4608      	mov	r0, r1
 800323a:	6023      	str	r3, [r4, #0]
 800323c:	f7fd fba7 	bl	800098e <_close>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d102      	bne.n	800324a <_close_r+0x1a>
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	b103      	cbz	r3, 800324a <_close_r+0x1a>
 8003248:	602b      	str	r3, [r5, #0]
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	20000148 	.word	0x20000148

08003250 <__sflush_r>:
 8003250:	898a      	ldrh	r2, [r1, #12]
 8003252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003256:	4605      	mov	r5, r0
 8003258:	0710      	lsls	r0, r2, #28
 800325a:	460c      	mov	r4, r1
 800325c:	d458      	bmi.n	8003310 <__sflush_r+0xc0>
 800325e:	684b      	ldr	r3, [r1, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	dc05      	bgt.n	8003270 <__sflush_r+0x20>
 8003264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	dc02      	bgt.n	8003270 <__sflush_r+0x20>
 800326a:	2000      	movs	r0, #0
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003272:	2e00      	cmp	r6, #0
 8003274:	d0f9      	beq.n	800326a <__sflush_r+0x1a>
 8003276:	2300      	movs	r3, #0
 8003278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800327c:	682f      	ldr	r7, [r5, #0]
 800327e:	6a21      	ldr	r1, [r4, #32]
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	d032      	beq.n	80032ea <__sflush_r+0x9a>
 8003284:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003286:	89a3      	ldrh	r3, [r4, #12]
 8003288:	075a      	lsls	r2, r3, #29
 800328a:	d505      	bpl.n	8003298 <__sflush_r+0x48>
 800328c:	6863      	ldr	r3, [r4, #4]
 800328e:	1ac0      	subs	r0, r0, r3
 8003290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003292:	b10b      	cbz	r3, 8003298 <__sflush_r+0x48>
 8003294:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003296:	1ac0      	subs	r0, r0, r3
 8003298:	2300      	movs	r3, #0
 800329a:	4602      	mov	r2, r0
 800329c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800329e:	6a21      	ldr	r1, [r4, #32]
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b0      	blx	r6
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	d106      	bne.n	80032b8 <__sflush_r+0x68>
 80032aa:	6829      	ldr	r1, [r5, #0]
 80032ac:	291d      	cmp	r1, #29
 80032ae:	d848      	bhi.n	8003342 <__sflush_r+0xf2>
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <__sflush_r+0x108>)
 80032b2:	40ca      	lsrs	r2, r1
 80032b4:	07d6      	lsls	r6, r2, #31
 80032b6:	d544      	bpl.n	8003342 <__sflush_r+0xf2>
 80032b8:	2200      	movs	r2, #0
 80032ba:	6062      	str	r2, [r4, #4]
 80032bc:	6922      	ldr	r2, [r4, #16]
 80032be:	04d9      	lsls	r1, r3, #19
 80032c0:	6022      	str	r2, [r4, #0]
 80032c2:	d504      	bpl.n	80032ce <__sflush_r+0x7e>
 80032c4:	1c42      	adds	r2, r0, #1
 80032c6:	d101      	bne.n	80032cc <__sflush_r+0x7c>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	b903      	cbnz	r3, 80032ce <__sflush_r+0x7e>
 80032cc:	6560      	str	r0, [r4, #84]	; 0x54
 80032ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032d0:	602f      	str	r7, [r5, #0]
 80032d2:	2900      	cmp	r1, #0
 80032d4:	d0c9      	beq.n	800326a <__sflush_r+0x1a>
 80032d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032da:	4299      	cmp	r1, r3
 80032dc:	d002      	beq.n	80032e4 <__sflush_r+0x94>
 80032de:	4628      	mov	r0, r5
 80032e0:	f000 f8ec 	bl	80034bc <_free_r>
 80032e4:	2000      	movs	r0, #0
 80032e6:	6360      	str	r0, [r4, #52]	; 0x34
 80032e8:	e7c0      	b.n	800326c <__sflush_r+0x1c>
 80032ea:	2301      	movs	r3, #1
 80032ec:	4628      	mov	r0, r5
 80032ee:	47b0      	blx	r6
 80032f0:	1c41      	adds	r1, r0, #1
 80032f2:	d1c8      	bne.n	8003286 <__sflush_r+0x36>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0c5      	beq.n	8003286 <__sflush_r+0x36>
 80032fa:	2b1d      	cmp	r3, #29
 80032fc:	d001      	beq.n	8003302 <__sflush_r+0xb2>
 80032fe:	2b16      	cmp	r3, #22
 8003300:	d101      	bne.n	8003306 <__sflush_r+0xb6>
 8003302:	602f      	str	r7, [r5, #0]
 8003304:	e7b1      	b.n	800326a <__sflush_r+0x1a>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	e7ad      	b.n	800326c <__sflush_r+0x1c>
 8003310:	690f      	ldr	r7, [r1, #16]
 8003312:	2f00      	cmp	r7, #0
 8003314:	d0a9      	beq.n	800326a <__sflush_r+0x1a>
 8003316:	0793      	lsls	r3, r2, #30
 8003318:	bf18      	it	ne
 800331a:	2300      	movne	r3, #0
 800331c:	680e      	ldr	r6, [r1, #0]
 800331e:	bf08      	it	eq
 8003320:	694b      	ldreq	r3, [r1, #20]
 8003322:	eba6 0807 	sub.w	r8, r6, r7
 8003326:	600f      	str	r7, [r1, #0]
 8003328:	608b      	str	r3, [r1, #8]
 800332a:	f1b8 0f00 	cmp.w	r8, #0
 800332e:	dd9c      	ble.n	800326a <__sflush_r+0x1a>
 8003330:	4643      	mov	r3, r8
 8003332:	463a      	mov	r2, r7
 8003334:	6a21      	ldr	r1, [r4, #32]
 8003336:	4628      	mov	r0, r5
 8003338:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800333a:	47b0      	blx	r6
 800333c:	2800      	cmp	r0, #0
 800333e:	dc06      	bgt.n	800334e <__sflush_r+0xfe>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003346:	81a3      	strh	r3, [r4, #12]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800334c:	e78e      	b.n	800326c <__sflush_r+0x1c>
 800334e:	4407      	add	r7, r0
 8003350:	eba8 0800 	sub.w	r8, r8, r0
 8003354:	e7e9      	b.n	800332a <__sflush_r+0xda>
 8003356:	bf00      	nop
 8003358:	20400001 	.word	0x20400001

0800335c <_fflush_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	690b      	ldr	r3, [r1, #16]
 8003360:	4605      	mov	r5, r0
 8003362:	460c      	mov	r4, r1
 8003364:	b1db      	cbz	r3, 800339e <_fflush_r+0x42>
 8003366:	b118      	cbz	r0, 8003370 <_fflush_r+0x14>
 8003368:	6983      	ldr	r3, [r0, #24]
 800336a:	b90b      	cbnz	r3, 8003370 <_fflush_r+0x14>
 800336c:	f7ff fa90 	bl	8002890 <__sinit>
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <_fflush_r+0x48>)
 8003372:	429c      	cmp	r4, r3
 8003374:	d109      	bne.n	800338a <_fflush_r+0x2e>
 8003376:	686c      	ldr	r4, [r5, #4]
 8003378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800337c:	b17b      	cbz	r3, 800339e <_fflush_r+0x42>
 800337e:	4621      	mov	r1, r4
 8003380:	4628      	mov	r0, r5
 8003382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003386:	f7ff bf63 	b.w	8003250 <__sflush_r>
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <_fflush_r+0x4c>)
 800338c:	429c      	cmp	r4, r3
 800338e:	d101      	bne.n	8003394 <_fflush_r+0x38>
 8003390:	68ac      	ldr	r4, [r5, #8]
 8003392:	e7f1      	b.n	8003378 <_fflush_r+0x1c>
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <_fflush_r+0x50>)
 8003396:	429c      	cmp	r4, r3
 8003398:	bf08      	it	eq
 800339a:	68ec      	ldreq	r4, [r5, #12]
 800339c:	e7ec      	b.n	8003378 <_fflush_r+0x1c>
 800339e:	2000      	movs	r0, #0
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
 80033a2:	bf00      	nop
 80033a4:	08003644 	.word	0x08003644
 80033a8:	08003664 	.word	0x08003664
 80033ac:	08003624 	.word	0x08003624

080033b0 <_lseek_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4605      	mov	r5, r0
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	2200      	movs	r2, #0
 80033ba:	4c05      	ldr	r4, [pc, #20]	; (80033d0 <_lseek_r+0x20>)
 80033bc:	6022      	str	r2, [r4, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7fd fb09 	bl	80009d6 <_lseek>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_lseek_r+0x1e>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_lseek_r+0x1e>
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000148 	.word	0x20000148

080033d4 <__swhatbuf_r>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	460e      	mov	r6, r1
 80033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033dc:	b096      	sub	sp, #88	; 0x58
 80033de:	2900      	cmp	r1, #0
 80033e0:	4614      	mov	r4, r2
 80033e2:	461d      	mov	r5, r3
 80033e4:	da07      	bge.n	80033f6 <__swhatbuf_r+0x22>
 80033e6:	2300      	movs	r3, #0
 80033e8:	602b      	str	r3, [r5, #0]
 80033ea:	89b3      	ldrh	r3, [r6, #12]
 80033ec:	061a      	lsls	r2, r3, #24
 80033ee:	d410      	bmi.n	8003412 <__swhatbuf_r+0x3e>
 80033f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f4:	e00e      	b.n	8003414 <__swhatbuf_r+0x40>
 80033f6:	466a      	mov	r2, sp
 80033f8:	f000 f8be 	bl	8003578 <_fstat_r>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	dbf2      	blt.n	80033e6 <__swhatbuf_r+0x12>
 8003400:	9a01      	ldr	r2, [sp, #4]
 8003402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800340a:	425a      	negs	r2, r3
 800340c:	415a      	adcs	r2, r3
 800340e:	602a      	str	r2, [r5, #0]
 8003410:	e7ee      	b.n	80033f0 <__swhatbuf_r+0x1c>
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	2000      	movs	r0, #0
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	b016      	add	sp, #88	; 0x58
 800341a:	bd70      	pop	{r4, r5, r6, pc}

0800341c <__smakebuf_r>:
 800341c:	898b      	ldrh	r3, [r1, #12]
 800341e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003420:	079d      	lsls	r5, r3, #30
 8003422:	4606      	mov	r6, r0
 8003424:	460c      	mov	r4, r1
 8003426:	d507      	bpl.n	8003438 <__smakebuf_r+0x1c>
 8003428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	6123      	str	r3, [r4, #16]
 8003430:	2301      	movs	r3, #1
 8003432:	6163      	str	r3, [r4, #20]
 8003434:	b002      	add	sp, #8
 8003436:	bd70      	pop	{r4, r5, r6, pc}
 8003438:	ab01      	add	r3, sp, #4
 800343a:	466a      	mov	r2, sp
 800343c:	f7ff ffca 	bl	80033d4 <__swhatbuf_r>
 8003440:	9900      	ldr	r1, [sp, #0]
 8003442:	4605      	mov	r5, r0
 8003444:	4630      	mov	r0, r6
 8003446:	f7ff faad 	bl	80029a4 <_malloc_r>
 800344a:	b948      	cbnz	r0, 8003460 <__smakebuf_r+0x44>
 800344c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003450:	059a      	lsls	r2, r3, #22
 8003452:	d4ef      	bmi.n	8003434 <__smakebuf_r+0x18>
 8003454:	f023 0303 	bic.w	r3, r3, #3
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	e7e3      	b.n	8003428 <__smakebuf_r+0xc>
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <__smakebuf_r+0x7c>)
 8003462:	62b3      	str	r3, [r6, #40]	; 0x28
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	6020      	str	r0, [r4, #0]
 8003468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346c:	81a3      	strh	r3, [r4, #12]
 800346e:	9b00      	ldr	r3, [sp, #0]
 8003470:	6120      	str	r0, [r4, #16]
 8003472:	6163      	str	r3, [r4, #20]
 8003474:	9b01      	ldr	r3, [sp, #4]
 8003476:	b15b      	cbz	r3, 8003490 <__smakebuf_r+0x74>
 8003478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800347c:	4630      	mov	r0, r6
 800347e:	f000 f88d 	bl	800359c <_isatty_r>
 8003482:	b128      	cbz	r0, 8003490 <__smakebuf_r+0x74>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	431d      	orrs	r5, r3
 8003494:	81a5      	strh	r5, [r4, #12]
 8003496:	e7cd      	b.n	8003434 <__smakebuf_r+0x18>
 8003498:	08002859 	.word	0x08002859

0800349c <memchr>:
 800349c:	b510      	push	{r4, lr}
 800349e:	b2c9      	uxtb	r1, r1
 80034a0:	4402      	add	r2, r0
 80034a2:	4290      	cmp	r0, r2
 80034a4:	4603      	mov	r3, r0
 80034a6:	d101      	bne.n	80034ac <memchr+0x10>
 80034a8:	2300      	movs	r3, #0
 80034aa:	e003      	b.n	80034b4 <memchr+0x18>
 80034ac:	781c      	ldrb	r4, [r3, #0]
 80034ae:	3001      	adds	r0, #1
 80034b0:	428c      	cmp	r4, r1
 80034b2:	d1f6      	bne.n	80034a2 <memchr+0x6>
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd10      	pop	{r4, pc}

080034b8 <__malloc_lock>:
 80034b8:	4770      	bx	lr

080034ba <__malloc_unlock>:
 80034ba:	4770      	bx	lr

080034bc <_free_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	4605      	mov	r5, r0
 80034c0:	2900      	cmp	r1, #0
 80034c2:	d043      	beq.n	800354c <_free_r+0x90>
 80034c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034c8:	1f0c      	subs	r4, r1, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bfb8      	it	lt
 80034ce:	18e4      	addlt	r4, r4, r3
 80034d0:	f7ff fff2 	bl	80034b8 <__malloc_lock>
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <_free_r+0x94>)
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	4610      	mov	r0, r2
 80034da:	b933      	cbnz	r3, 80034ea <_free_r+0x2e>
 80034dc:	6063      	str	r3, [r4, #4]
 80034de:	6014      	str	r4, [r2, #0]
 80034e0:	4628      	mov	r0, r5
 80034e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034e6:	f7ff bfe8 	b.w	80034ba <__malloc_unlock>
 80034ea:	42a3      	cmp	r3, r4
 80034ec:	d90b      	bls.n	8003506 <_free_r+0x4a>
 80034ee:	6821      	ldr	r1, [r4, #0]
 80034f0:	1862      	adds	r2, r4, r1
 80034f2:	4293      	cmp	r3, r2
 80034f4:	bf01      	itttt	eq
 80034f6:	681a      	ldreq	r2, [r3, #0]
 80034f8:	685b      	ldreq	r3, [r3, #4]
 80034fa:	1852      	addeq	r2, r2, r1
 80034fc:	6022      	streq	r2, [r4, #0]
 80034fe:	6063      	str	r3, [r4, #4]
 8003500:	6004      	str	r4, [r0, #0]
 8003502:	e7ed      	b.n	80034e0 <_free_r+0x24>
 8003504:	4613      	mov	r3, r2
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	b10a      	cbz	r2, 800350e <_free_r+0x52>
 800350a:	42a2      	cmp	r2, r4
 800350c:	d9fa      	bls.n	8003504 <_free_r+0x48>
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	1858      	adds	r0, r3, r1
 8003512:	42a0      	cmp	r0, r4
 8003514:	d10b      	bne.n	800352e <_free_r+0x72>
 8003516:	6820      	ldr	r0, [r4, #0]
 8003518:	4401      	add	r1, r0
 800351a:	1858      	adds	r0, r3, r1
 800351c:	4282      	cmp	r2, r0
 800351e:	6019      	str	r1, [r3, #0]
 8003520:	d1de      	bne.n	80034e0 <_free_r+0x24>
 8003522:	6810      	ldr	r0, [r2, #0]
 8003524:	6852      	ldr	r2, [r2, #4]
 8003526:	4401      	add	r1, r0
 8003528:	6019      	str	r1, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	e7d8      	b.n	80034e0 <_free_r+0x24>
 800352e:	d902      	bls.n	8003536 <_free_r+0x7a>
 8003530:	230c      	movs	r3, #12
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	e7d4      	b.n	80034e0 <_free_r+0x24>
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	1821      	adds	r1, r4, r0
 800353a:	428a      	cmp	r2, r1
 800353c:	bf01      	itttt	eq
 800353e:	6811      	ldreq	r1, [r2, #0]
 8003540:	6852      	ldreq	r2, [r2, #4]
 8003542:	1809      	addeq	r1, r1, r0
 8003544:	6021      	streq	r1, [r4, #0]
 8003546:	6062      	str	r2, [r4, #4]
 8003548:	605c      	str	r4, [r3, #4]
 800354a:	e7c9      	b.n	80034e0 <_free_r+0x24>
 800354c:	bd38      	pop	{r3, r4, r5, pc}
 800354e:	bf00      	nop
 8003550:	20000098 	.word	0x20000098

08003554 <_read_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4605      	mov	r5, r0
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	2200      	movs	r2, #0
 800355e:	4c05      	ldr	r4, [pc, #20]	; (8003574 <_read_r+0x20>)
 8003560:	6022      	str	r2, [r4, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	f7fd f9da 	bl	800091c <_read>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_read_r+0x1e>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	b103      	cbz	r3, 8003572 <_read_r+0x1e>
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000148 	.word	0x20000148

08003578 <_fstat_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	2300      	movs	r3, #0
 800357c:	4c06      	ldr	r4, [pc, #24]	; (8003598 <_fstat_r+0x20>)
 800357e:	4605      	mov	r5, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	f7fd fa0d 	bl	80009a4 <_fstat>
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	d102      	bne.n	8003594 <_fstat_r+0x1c>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	b103      	cbz	r3, 8003594 <_fstat_r+0x1c>
 8003592:	602b      	str	r3, [r5, #0]
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	bf00      	nop
 8003598:	20000148 	.word	0x20000148

0800359c <_isatty_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	2300      	movs	r3, #0
 80035a0:	4c05      	ldr	r4, [pc, #20]	; (80035b8 <_isatty_r+0x1c>)
 80035a2:	4605      	mov	r5, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	f7fd fa0b 	bl	80009c2 <_isatty>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_isatty_r+0x1a>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_isatty_r+0x1a>
 80035b4:	602b      	str	r3, [r5, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000148 	.word	0x20000148

080035bc <_init>:
 80035bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035be:	bf00      	nop
 80035c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c2:	bc08      	pop	{r3}
 80035c4:	469e      	mov	lr, r3
 80035c6:	4770      	bx	lr

080035c8 <_fini>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr
